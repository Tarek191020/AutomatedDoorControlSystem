
AutomatedDoorControlSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000108e  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000108e  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 00000118  00000000  00000000  000010bd  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000218  00000000  00000000  000011d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000389e  00000000  00000000  000013ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c2c  00000000  00000000  00004c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012ef  00000000  00000000  000058b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000450  00000000  00000000  00006ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046f  00000000  00000000  00006ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000144d  00000000  00000000  00007467  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000198  00000000  00000000  000088b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000fec  00000fec  00001080  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00008a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .progmemx.data 00000029  0000006c  0000006c  00000100  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 15 .text.main    000001d8  000000b0  000000b0  00000144  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.BUZZER_voidInit 0000000c  00000f72  00000f72  00001006  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.BUZZER_voidTurnOn 0000000c  00000f7e  00000f7e  00001012  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.BUZZER_voidTurnOff 0000000c  00000f8a  00000f8a  0000101e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.KEYPAD_voidInit 0000006c  00000b84  00000b84  00000c18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.KEYPAD_voidGetButton 0000012c  00000288  00000288  0000031c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .progmemx.data.keypadConfig 0000001a  00000095  00000095  00000129  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 22 .text.LCD_voidWriteCommand 000000f0  000003b4  000003b4  00000448  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.LCD_voidInit 000000aa  000009c8  000009c8  00000a5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.LCD_voidWriteData 000000f0  000004a4  000004a4  00000538  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.LCD_voidWriteString 0000001a  00000eb8  00000eb8  00000f4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.LCD_voidGoToXY 00000044  00000d66  00000d66  00000dfa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.LCD_voidClear 00000014  00000f02  00000f02  00000f96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.LED_voidInit 0000000c  00000f96  00000f96  0000102a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.LED_voidTurnOn 0000000c  00000fa2  00000fa2  00001036  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.LED_voidTurnOff 0000000c  00000fae  00000fae  00001042  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.SERVO_voidInit 00000010  00000f2a  00000f2a  00000fbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.SERVO_voidOn 0000003e  00000e32  00000e32  00000ec6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.SERVO_voidOff 00000006  00000fe0  00000fe0  00001074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.DIO_voidSetPinDirection 000000da  00000672  00000672  00000706  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.DIO_voidSetPinValue 000000da  0000074c  0000074c  000007e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.DIO_voidGetPinValue 00000068  00000bf0  00000bf0  00000c84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.DIO_voidActivePinPullUpResistance 00000068  00000c58  00000c58  00000cec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.PWM_voidInitChannel_1A 00000026  00000e70  00000e70  00000f04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.PWM_voidGenerate_PWM_Channel_1A 00000098  00000a72  00000a72  00000b06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.PWM_voidStop_PWM_Channel_1A 00000014  00000f16  00000f16  00000faa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text         0000000e  00000f3a  00000f3a  00000fce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text         000000ce  000008fa  000008fa  0000098e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text         0000000a  00000fc6  00000fc6  0000105a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text         00000008  00000fd0  00000fd0  00001064  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text         000000de  00000594  00000594  00000628  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text         0000005e  00000cc0  00000cc0  00000d54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text         0000007a  00000b0a  00000b0a  00000b9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text         00000048  00000d1e  00000d1e  00000db2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text         0000000c  00000fba  00000fba  0000104e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text         00000006  00000fe6  00000fe6  0000107a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text         0000000e  00000f48  00000f48  00000fdc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text         0000000e  00000f56  00000f56  00000fea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text         00000022  00000e96  00000e96  00000f2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text         00000044  00000daa  00000daa  00000e3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text         0000000e  00000f64  00000f64  00000ff8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text         00000008  00000fd8  00000fd8  0000106c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text         000000d4  00000826  00000826  000008ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.libgcc.div 00000044  00000dee  00000dee  00000e82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.libgcc  0000001a  00000ed2  00000ed2  00000f66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.__dummy_fini 00000002  00000ff4  00000ff4  00001088  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.__dummy_funcs_on_exit 00000002  00000ff6  00000ff6  0000108a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.__dummy_simulator_exit 00000002  00000ff8  00000ff8  0000108c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.exit    00000016  00000eec  00000eec  00000f80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text._Exit   00000004  00000ff0  00000ff0  00001084  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__bad_interrupt>
   8:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__bad_interrupt>
   c:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__bad_interrupt>
  10:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__bad_interrupt>
  14:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__bad_interrupt>
  18:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__bad_interrupt>
  1c:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__bad_interrupt>
  20:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__bad_interrupt>
  24:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__bad_interrupt>
  28:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__bad_interrupt>
  2c:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__bad_interrupt>
  30:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__bad_interrupt>
  34:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__bad_interrupt>
  38:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__bad_interrupt>
  3c:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__bad_interrupt>
  40:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__bad_interrupt>
  44:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__bad_interrupt>
  48:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__bad_interrupt>
  4c:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__bad_interrupt>
  50:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  64:	0c 94 76 07 	jmp	0xeec	; 0xeec <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

00000fec <__bad_interrupt>:
 fec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.main:

000000b0 <main>:
#include "Servo_interface.h"
#include "LED_interface.h"
#include "BUZZER_interface.h"

int main(void)
{
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
  b8:	e0 97       	sbiw	r28, 0x30	; 48
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	f8 94       	cli
  be:	de bf       	out	0x3e, r29	; 62
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	cd bf       	out	0x3d, r28	; 61
	/*initialize HAL*/
	LCD_voidInit();
  c4:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_voidInit>
	LED_voidInit();
  c8:	0e 94 cb 07 	call	0xf96	; 0xf96 <LED_voidInit>
	BUZZER_voidInit();
  cc:	0e 94 b9 07 	call	0xf72	; 0xf72 <BUZZER_voidInit>
	//SERVO_voidInit();
	//KEYPAD_voidInit();
	
	/*init password*/
	u8 password[]={'1','2','3'};
  d0:	81 e3       	ldi	r24, 0x31	; 49
  d2:	89 83       	std	Y+1, r24	; 0x01
  d4:	82 e3       	ldi	r24, 0x32	; 50
  d6:	8a 83       	std	Y+2, r24	; 0x02
  d8:	83 e3       	ldi	r24, 0x33	; 51
  da:	8b 83       	std	Y+3, r24	; 0x03
	u8 enteredPassword[3];
	
	/*string variables to use with lcd*/
	u8 str[]="enter password: ";
  dc:	2c e6       	ldi	r18, 0x6C	; 108
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	40 e0       	ldi	r20, 0x00	; 0
  e2:	81 e1       	ldi	r24, 0x11	; 17
  e4:	f9 01       	movw	r30, r18
  e6:	de 01       	movw	r26, r28
  e8:	17 96       	adiw	r26, 0x07	; 7
  ea:	74 2f       	mov	r23, r20
  ec:	0e 94 69 07 	call	0xed2	; 0xed2 <__movmemx_qi>
	u8 WelcomeString[]="welecome";
  f0:	2d e7       	ldi	r18, 0x7D	; 125
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	40 e0       	ldi	r20, 0x00	; 0
  f6:	89 e0       	ldi	r24, 0x09	; 9
  f8:	f9 01       	movw	r30, r18
  fa:	de 01       	movw	r26, r28
  fc:	58 96       	adiw	r26, 0x18	; 24
  fe:	74 2f       	mov	r23, r20
 100:	0e 94 69 07 	call	0xed2	; 0xed2 <__movmemx_qi>
	u8 WrongString[]="Wrong Password";
 104:	26 e8       	ldi	r18, 0x86	; 134
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	40 e0       	ldi	r20, 0x00	; 0
 10a:	8f e0       	ldi	r24, 0x0F	; 15
 10c:	f9 01       	movw	r30, r18
 10e:	de 01       	movw	r26, r28
 110:	91 96       	adiw	r26, 0x21	; 33
 112:	74 2f       	mov	r23, r20
 114:	0e 94 69 07 	call	0xed2	; 0xed2 <__movmemx_qi>
	
	/*variables used to check password*/
	u8 trial=0;
	u8 true=0;
	
	u8 close=NOTPRESSED;
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	88 ab       	std	Y+48, r24	; 0x30
	u8 WelcomeString[]="welecome";
	u8 WrongString[]="Wrong Password";
	
	/*variables used to check password*/
	u8 trial=0;
	u8 true=0;
 11c:	10 e0       	ldi	r17, 0x00	; 0
	u8 str[]="enter password: ";
	u8 WelcomeString[]="welecome";
	u8 WrongString[]="Wrong Password";
	
	/*variables used to check password*/
	u8 trial=0;
 11e:	e1 2c       	mov	r14, r1
	u8 true=0;
	
	u8 close=NOTPRESSED;
	while(1)
	{
		KEYPAD_voidInit();
 120:	0e 94 c2 05 	call	0xb84	; 0xb84 <KEYPAD_voidInit>
		LCD_voidClear();
 124:	0e 94 81 07 	call	0xf02	; 0xf02 <LCD_voidClear>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	81 ee       	ldi	r24, 0xE1	; 225
 12c:	94 e0       	ldi	r25, 0x04	; 4
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <main+0x7e>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x88>
 138:	00 00       	nop
		_delay_ms(100);
		
		LCD_voidWriteString(str);
 13a:	ce 01       	movw	r24, r28
 13c:	07 96       	adiw	r24, 0x07	; 7
 13e:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <LCD_voidWriteString>
		LCD_voidGoToXY(1,0);
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	0e 94 b3 06 	call	0xd66	; 0xd66 <LCD_voidGoToXY>
		
		//entering password using keypad
		for (u8 i=0; i<3; i++)
 14a:	f1 2c       	mov	r15, r1
 14c:	11 c0       	rjmp	.+34     	; 0x170 <main+0xc0>
		{
			true=0;
			do
			{
				KEYPAD_voidGetButton(&enteredPassword[i]);
 14e:	04 e0       	ldi	r16, 0x04	; 4
 150:	10 e0       	ldi	r17, 0x00	; 0
 152:	0c 0f       	add	r16, r28
 154:	1d 1f       	adc	r17, r29
 156:	0f 0d       	add	r16, r15
 158:	11 1d       	adc	r17, r1
 15a:	c8 01       	movw	r24, r16
 15c:	0e 94 44 01 	call	0x288	; 0x288 <KEYPAD_voidGetButton>
			} while (enteredPassword[i]==NOTPRESSED);
 160:	f8 01       	movw	r30, r16
 162:	80 81       	ld	r24, Z
 164:	8f 3f       	cpi	r24, 0xFF	; 255
 166:	99 f3       	breq	.-26     	; 0x14e <main+0x9e>
			LCD_voidWriteData(enteredPassword[i]);
 168:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LCD_voidWriteData>
		
		LCD_voidWriteString(str);
		LCD_voidGoToXY(1,0);
		
		//entering password using keypad
		for (u8 i=0; i<3; i++)
 16c:	f3 94       	inc	r15
		{
			true=0;
 16e:	10 e0       	ldi	r17, 0x00	; 0
		
		LCD_voidWriteString(str);
		LCD_voidGoToXY(1,0);
		
		//entering password using keypad
		for (u8 i=0; i<3; i++)
 170:	f2 e0       	ldi	r31, 0x02	; 2
 172:	ff 15       	cp	r31, r15
 174:	60 f7       	brcc	.-40     	; 0x14e <main+0x9e>
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	14 c0       	rjmp	.+40     	; 0x1a2 <main+0xf2>
		}
		
		//checking password
		for (u8 i=0;i<3;i++)
		{
			if (enteredPassword[i]==password[i])
 17a:	82 2f       	mov	r24, r18
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	e4 e0       	ldi	r30, 0x04	; 4
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	ec 0f       	add	r30, r28
 184:	fd 1f       	adc	r31, r29
 186:	e8 0f       	add	r30, r24
 188:	f9 1f       	adc	r31, r25
 18a:	30 81       	ld	r19, Z
 18c:	e1 e0       	ldi	r30, 0x01	; 1
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	ec 0f       	add	r30, r28
 192:	fd 1f       	adc	r31, r29
 194:	e8 0f       	add	r30, r24
 196:	f9 1f       	adc	r31, r25
 198:	80 81       	ld	r24, Z
 19a:	38 13       	cpse	r19, r24
 19c:	01 c0       	rjmp	.+2      	; 0x1a0 <main+0xf0>
			{
				true++;
 19e:	1f 5f       	subi	r17, 0xFF	; 255
			} while (enteredPassword[i]==NOTPRESSED);
			LCD_voidWriteData(enteredPassword[i]);
		}
		
		//checking password
		for (u8 i=0;i<3;i++)
 1a0:	2f 5f       	subi	r18, 0xFF	; 255
 1a2:	23 30       	cpi	r18, 0x03	; 3
 1a4:	50 f3       	brcs	.-44     	; 0x17a <main+0xca>
 1a6:	2f ef       	ldi	r18, 0xFF	; 255
 1a8:	80 e7       	ldi	r24, 0x70	; 112
 1aa:	92 e0       	ldi	r25, 0x02	; 2
 1ac:	21 50       	subi	r18, 0x01	; 1
 1ae:	80 40       	sbci	r24, 0x00	; 0
 1b0:	90 40       	sbci	r25, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <main+0xfc>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0x106>
 1b6:	00 00       	nop
			}
		}
		_delay_ms(50);
		
		//open door if password true
		if (true==3)
 1b8:	13 30       	cpi	r17, 0x03	; 3
 1ba:	41 f5       	brne	.+80     	; 0x20c <main+0x15c>
		{
			LCD_voidClear();
 1bc:	0e 94 81 07 	call	0xf02	; 0xf02 <LCD_voidClear>
			LCD_voidGoToXY(1,5);
 1c0:	65 e0       	ldi	r22, 0x05	; 5
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	0e 94 b3 06 	call	0xd66	; 0xd66 <LCD_voidGoToXY>
			LCD_voidWriteString(WelcomeString);
 1c8:	ce 01       	movw	r24, r28
 1ca:	48 96       	adiw	r24, 0x18	; 24
 1cc:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <LCD_voidWriteString>
			SERVO_voidInit();
 1d0:	0e 94 95 07 	call	0xf2a	; 0xf2a <SERVO_voidInit>
			SERVO_voidOn(90);
 1d4:	8a e5       	ldi	r24, 0x5A	; 90
 1d6:	0e 94 19 07 	call	0xe32	; 0xe32 <SERVO_voidOn>
 1da:	ef ef       	ldi	r30, 0xFF	; 255
 1dc:	f3 ed       	ldi	r31, 0xD3	; 211
 1de:	20 e3       	ldi	r18, 0x30	; 48
 1e0:	e1 50       	subi	r30, 0x01	; 1
 1e2:	f0 40       	sbci	r31, 0x00	; 0
 1e4:	20 40       	sbci	r18, 0x00	; 0
 1e6:	e1 f7       	brne	.-8      	; 0x1e0 <main+0x130>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <main+0x13a>
 1ea:	00 00       	nop
			_delay_ms(1000);
			SERVO_voidOn(0);
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	0e 94 19 07 	call	0xe32	; 0xe32 <SERVO_voidOn>
			SERVO_voidOff();
 1f2:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <SERVO_voidOff>
 1f6:	8f ef       	ldi	r24, 0xFF	; 255
 1f8:	93 ec       	ldi	r25, 0xC3	; 195
 1fa:	e9 e0       	ldi	r30, 0x09	; 9
 1fc:	81 50       	subi	r24, 0x01	; 1
 1fe:	90 40       	sbci	r25, 0x00	; 0
 200:	e0 40       	sbci	r30, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <main+0x14c>
 204:	00 c0       	rjmp	.+0      	; 0x206 <main+0x156>
 206:	00 00       	nop
			_delay_ms(200);
			trial=0;
 208:	e1 2c       	mov	r14, r1
 20a:	34 c0       	rjmp	.+104    	; 0x274 <main+0x1c4>
		}
		
		//close door if pass is wrong 
		else
		{
			SERVO_voidInit();
 20c:	0e 94 95 07 	call	0xf2a	; 0xf2a <SERVO_voidInit>
			SERVO_voidOn(0);
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	0e 94 19 07 	call	0xe32	; 0xe32 <SERVO_voidOn>
 216:	ff ef       	ldi	r31, 0xFF	; 255
 218:	29 e6       	ldi	r18, 0x69	; 105
 21a:	88 e1       	ldi	r24, 0x18	; 24
 21c:	f1 50       	subi	r31, 0x01	; 1
 21e:	20 40       	sbci	r18, 0x00	; 0
 220:	80 40       	sbci	r24, 0x00	; 0
 222:	e1 f7       	brne	.-8      	; 0x21c <main+0x16c>
 224:	00 c0       	rjmp	.+0      	; 0x226 <main+0x176>
 226:	00 00       	nop
			_delay_ms(500);
			SERVO_voidOff();
 228:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <SERVO_voidOff>
			KEYPAD_voidInit();
 22c:	0e 94 c2 05 	call	0xb84	; 0xb84 <KEYPAD_voidInit>
			LCD_voidClear();
 230:	0e 94 81 07 	call	0xf02	; 0xf02 <LCD_voidClear>
			LCD_voidGoToXY(1,2);
 234:	62 e0       	ldi	r22, 0x02	; 2
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0e 94 b3 06 	call	0xd66	; 0xd66 <LCD_voidGoToXY>
			LCD_voidWriteString(WrongString);
 23c:	ce 01       	movw	r24, r28
 23e:	81 96       	adiw	r24, 0x21	; 33
 240:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <LCD_voidWriteString>
			trial++;
 244:	e3 94       	inc	r14
			//security system fire if 3 trials of password are wrong
			if (trial==3)
 246:	93 e0       	ldi	r25, 0x03	; 3
 248:	e9 12       	cpse	r14, r25
 24a:	14 c0       	rjmp	.+40     	; 0x274 <main+0x1c4>
			{
				do
				{
					LED_voidTurnOn();
 24c:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <LED_voidTurnOn>
					BUZZER_voidTurnOn();
 250:	0e 94 bf 07 	call	0xf7e	; 0xf7e <BUZZER_voidTurnOn>
					KEYPAD_voidGetButton(&close);
 254:	ce 01       	movw	r24, r28
 256:	c0 96       	adiw	r24, 0x30	; 48
 258:	0e 94 44 01 	call	0x288	; 0x288 <KEYPAD_voidGetButton>
					//if any button of keypad pressed security system will stop
					if (close!=NOTPRESSED)
 25c:	88 a9       	ldd	r24, Y+48	; 0x30
 25e:	8f 3f       	cpi	r24, 0xFF	; 255
 260:	31 f0       	breq	.+12     	; 0x26e <main+0x1be>
					{
						BUZZER_voidTurnOff();
 262:	0e 94 c5 07 	call	0xf8a	; 0xf8a <BUZZER_voidTurnOff>
						LED_voidTurnOff();
 266:	0e 94 d7 07 	call	0xfae	; 0xfae <LED_voidTurnOff>
						break;
					}
				} while (close==NOTPRESSED);
				trial=0;
 26a:	e1 2c       	mov	r14, r1
					//if any button of keypad pressed security system will stop
					if (close!=NOTPRESSED)
					{
						BUZZER_voidTurnOff();
						LED_voidTurnOff();
						break;
 26c:	03 c0       	rjmp	.+6      	; 0x274 <main+0x1c4>
					}
				} while (close==NOTPRESSED);
 26e:	8f 3f       	cpi	r24, 0xFF	; 255
 270:	69 f3       	breq	.-38     	; 0x24c <main+0x19c>
				trial=0;
 272:	e1 2c       	mov	r14, r1
 274:	ef ef       	ldi	r30, 0xFF	; 255
 276:	f3 ed       	ldi	r31, 0xD3	; 211
 278:	20 e3       	ldi	r18, 0x30	; 48
 27a:	e1 50       	subi	r30, 0x01	; 1
 27c:	f0 40       	sbci	r31, 0x00	; 0
 27e:	20 40       	sbci	r18, 0x00	; 0
 280:	e1 f7       	brne	.-8      	; 0x27a <main+0x1ca>
 282:	00 c0       	rjmp	.+0      	; 0x284 <main+0x1d4>
 284:	00 00       	nop
 286:	4c cf       	rjmp	.-360    	; 0x120 <main+0x70>

Disassembly of section .text.BUZZER_voidInit:

00000f72 <BUZZER_voidInit>:
#include "BUZZER_interface.h"
#include "BUZZER_config.h"

void BUZZER_voidInit()
{
	DIO_voidSetPinDirection(BUZZER_PORT, BUZZER_PIN, DIO_PIN_OUTPUT);
 f72:	41 e0       	ldi	r20, 0x01	; 1
 f74:	60 e0       	ldi	r22, 0x00	; 0
 f76:	80 e0       	ldi	r24, 0x00	; 0
 f78:	0e 94 39 03 	call	0x672	; 0x672 <DIO_voidSetPinDirection>
 f7c:	08 95       	ret

Disassembly of section .text.BUZZER_voidTurnOn:

00000f7e <BUZZER_voidTurnOn>:
}
void BUZZER_voidTurnOn()
{
	DIO_voidSetPinValue(BUZZER_PORT, BUZZER_PIN, DIO_PIN_HIGH);
 f7e:	41 e0       	ldi	r20, 0x01	; 1
 f80:	60 e0       	ldi	r22, 0x00	; 0
 f82:	80 e0       	ldi	r24, 0x00	; 0
 f84:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
 f88:	08 95       	ret

Disassembly of section .text.BUZZER_voidTurnOff:

00000f8a <BUZZER_voidTurnOff>:
}
void BUZZER_voidTurnOff()
{
	DIO_voidSetPinValue(BUZZER_PORT, BUZZER_PIN, DIO_PIN_LOW);
 f8a:	40 e0       	ldi	r20, 0x00	; 0
 f8c:	60 e0       	ldi	r22, 0x00	; 0
 f8e:	80 e0       	ldi	r24, 0x00	; 0
 f90:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
 f94:	08 95       	ret

Disassembly of section .text.KEYPAD_voidInit:

00000b84 <KEYPAD_voidInit>:
#include"KEYPAD_config.h"

//u8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};

void KEYPAD_voidInit()
{
 b84:	cf 93       	push	r28
 b86:	df 93       	push	r29
	for (u8 i = 0; i < 4; i++) {
 b88:	c0 e0       	ldi	r28, 0x00	; 0
 b8a:	12 c0       	rjmp	.+36     	; 0xbb0 <KEYPAD_voidInit+0x2c>
		DIO_voidSetPinDirection(keypadConfig.ROWS_PORT, keypadConfig.ROWPINS[i], DIO_PIN_OUTPUT);
 b8c:	8c 2f       	mov	r24, r28
 b8e:	90 e0       	ldi	r25, 0x00	; 0
 b90:	01 96       	adiw	r24, 0x01	; 1
 b92:	09 2e       	mov	r0, r25
 b94:	00 0c       	add	r0, r0
 b96:	aa 0b       	sbc	r26, r26
 b98:	8b 56       	subi	r24, 0x6B	; 107
 b9a:	9f 4f       	sbci	r25, 0xFF	; 255
 b9c:	af 4f       	sbci	r26, 0xFF	; 255
 b9e:	fc 01       	movw	r30, r24
 ba0:	64 91       	lpm	r22, Z
 ba2:	a7 fd       	sbrc	r26, 7
 ba4:	60 81       	ld	r22, Z
 ba6:	41 e0       	ldi	r20, 0x01	; 1
 ba8:	82 e0       	ldi	r24, 0x02	; 2
 baa:	0e 94 39 03 	call	0x672	; 0x672 <DIO_voidSetPinDirection>

//u8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};

void KEYPAD_voidInit()
{
	for (u8 i = 0; i < 4; i++) {
 bae:	cf 5f       	subi	r28, 0xFF	; 255
 bb0:	c4 30       	cpi	r28, 0x04	; 4
 bb2:	60 f3       	brcs	.-40     	; 0xb8c <KEYPAD_voidInit+0x8>
 bb4:	c0 e0       	ldi	r28, 0x00	; 0
 bb6:	17 c0       	rjmp	.+46     	; 0xbe6 <KEYPAD_voidInit+0x62>
		DIO_voidSetPinDirection(keypadConfig.ROWS_PORT, keypadConfig.ROWPINS[i], DIO_PIN_OUTPUT);
	}
	for (u8 i = 0; i < 4; i++) {
		DIO_voidSetPinDirection(keypadConfig.COLSPORT, keypadConfig.COLPINS[i], DIO_PIN_INPUT);
 bb8:	8c 2f       	mov	r24, r28
 bba:	90 e0       	ldi	r25, 0x00	; 0
 bbc:	06 96       	adiw	r24, 0x06	; 6
 bbe:	09 2e       	mov	r0, r25
 bc0:	00 0c       	add	r0, r0
 bc2:	aa 0b       	sbc	r26, r26
 bc4:	8b 56       	subi	r24, 0x6B	; 107
 bc6:	9f 4f       	sbci	r25, 0xFF	; 255
 bc8:	af 4f       	sbci	r26, 0xFF	; 255
 bca:	fc 01       	movw	r30, r24
 bcc:	d4 91       	lpm	r29, Z
 bce:	a7 fd       	sbrc	r26, 7
 bd0:	d0 81       	ld	r29, Z
 bd2:	40 e0       	ldi	r20, 0x00	; 0
 bd4:	6d 2f       	mov	r22, r29
 bd6:	83 e0       	ldi	r24, 0x03	; 3
 bd8:	0e 94 39 03 	call	0x672	; 0x672 <DIO_voidSetPinDirection>
		DIO_voidActivePinPullUpResistance(keypadConfig.COLSPORT, keypadConfig.COLPINS[i]);
 bdc:	6d 2f       	mov	r22, r29
 bde:	83 e0       	ldi	r24, 0x03	; 3
 be0:	0e 94 2c 06 	call	0xc58	; 0xc58 <DIO_voidActivePinPullUpResistance>
void KEYPAD_voidInit()
{
	for (u8 i = 0; i < 4; i++) {
		DIO_voidSetPinDirection(keypadConfig.ROWS_PORT, keypadConfig.ROWPINS[i], DIO_PIN_OUTPUT);
	}
	for (u8 i = 0; i < 4; i++) {
 be4:	cf 5f       	subi	r28, 0xFF	; 255
 be6:	c4 30       	cpi	r28, 0x04	; 4
 be8:	38 f3       	brcs	.-50     	; 0xbb8 <KEYPAD_voidInit+0x34>
		DIO_voidSetPinDirection(keypadConfig.COLSPORT, keypadConfig.COLPINS[i], DIO_PIN_INPUT);
		DIO_voidActivePinPullUpResistance(keypadConfig.COLSPORT, keypadConfig.COLPINS[i]);
	}
}
 bea:	df 91       	pop	r29
 bec:	cf 91       	pop	r28
 bee:	08 95       	ret

Disassembly of section .text.KEYPAD_voidGetButton:

00000288 <KEYPAD_voidGetButton>:

void KEYPAD_voidGetButton(u8 *copy_u8Press)
{
 288:	8f 92       	push	r8
 28a:	9f 92       	push	r9
 28c:	af 92       	push	r10
 28e:	bf 92       	push	r11
 290:	cf 92       	push	r12
 292:	df 92       	push	r13
 294:	ef 92       	push	r14
 296:	ff 92       	push	r15
 298:	0f 93       	push	r16
 29a:	1f 93       	push	r17
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	0f 92       	push	r0
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
 2a6:	6c 01       	movw	r12, r24
	*copy_u8Press = NOTPRESSED;
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
 2aa:	f6 01       	movw	r30, r12
 2ac:	80 83       	st	Z, r24

	for (u8 row = 0; row < 4; row++)
 2ae:	a1 2c       	mov	r10, r1
 2b0:	6f c0       	rjmp	.+222    	; 0x390 <KEYPAD_voidGetButton+0x108>
	{
		// Activate the current row
		DIO_voidSetPinValue(keypadConfig.ROWS_PORT, keypadConfig.ROWPINS[row], DIO_PIN_LOW);
 2b2:	ea 2c       	mov	r14, r10
 2b4:	f1 2c       	mov	r15, r1
 2b6:	c7 01       	movw	r24, r14
 2b8:	01 96       	adiw	r24, 0x01	; 1
 2ba:	09 2e       	mov	r0, r25
 2bc:	00 0c       	add	r0, r0
 2be:	aa 0b       	sbc	r26, r26
 2c0:	8b 56       	subi	r24, 0x6B	; 107
 2c2:	9f 4f       	sbci	r25, 0xFF	; 255
 2c4:	af 4f       	sbci	r26, 0xFF	; 255
 2c6:	fc 01       	movw	r30, r24
 2c8:	94 90       	lpm	r9, Z
 2ca:	a7 fd       	sbrc	r26, 7
 2cc:	90 80       	ld	r9, Z
 2ce:	40 e0       	ldi	r20, 0x00	; 0
 2d0:	69 2d       	mov	r22, r9
 2d2:	82 e0       	ldi	r24, 0x02	; 2
 2d4:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>

		for (u8 col = 0; col < 4; col++)
 2d8:	b1 2c       	mov	r11, r1
 2da:	50 c0       	rjmp	.+160    	; 0x37c <KEYPAD_voidGetButton+0xf4>
		{
			// Check the state of the column pins
			u8 pinState = DIO_PIN_HIGH;
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	89 83       	std	Y+1, r24	; 0x01
			DIO_voidGetPinValue(keypadConfig.COLSPORT, keypadConfig.COLPINS[col], &pinState);
 2e0:	0b 2d       	mov	r16, r11
 2e2:	10 e0       	ldi	r17, 0x00	; 0
 2e4:	c8 01       	movw	r24, r16
 2e6:	06 96       	adiw	r24, 0x06	; 6
 2e8:	09 2e       	mov	r0, r25
 2ea:	00 0c       	add	r0, r0
 2ec:	aa 0b       	sbc	r26, r26
 2ee:	8b 56       	subi	r24, 0x6B	; 107
 2f0:	9f 4f       	sbci	r25, 0xFF	; 255
 2f2:	af 4f       	sbci	r26, 0xFF	; 255
 2f4:	fc 01       	movw	r30, r24
 2f6:	84 90       	lpm	r8, Z
 2f8:	a7 fd       	sbrc	r26, 7
 2fa:	80 80       	ld	r8, Z
 2fc:	ae 01       	movw	r20, r28
 2fe:	4f 5f       	subi	r20, 0xFF	; 255
 300:	5f 4f       	sbci	r21, 0xFF	; 255
 302:	68 2d       	mov	r22, r8
 304:	83 e0       	ldi	r24, 0x03	; 3
 306:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <DIO_voidGetPinValue>
			
			if (pinState == DIO_PIN_LOW)
 30a:	89 81       	ldd	r24, Y+1	; 0x01
 30c:	81 11       	cpse	r24, r1
 30e:	35 c0       	rjmp	.+106    	; 0x37a <KEYPAD_voidGetButton+0xf2>
 310:	8f e3       	ldi	r24, 0x3F	; 63
 312:	9c e9       	ldi	r25, 0x9C	; 156
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <KEYPAD_voidGetButton+0x8c>
 318:	00 c0       	rjmp	.+0      	; 0x31a <KEYPAD_voidGetButton+0x92>
 31a:	00 00       	nop
			{
				// Delay for a short period to debounce the button
				_delay_ms(10);

				// Check the pin state again after debouncing
				DIO_voidGetPinValue(keypadConfig.COLSPORT, keypadConfig.COLPINS[col], &pinState);
 31c:	ae 01       	movw	r20, r28
 31e:	4f 5f       	subi	r20, 0xFF	; 255
 320:	5f 4f       	sbci	r21, 0xFF	; 255
 322:	68 2d       	mov	r22, r8
 324:	83 e0       	ldi	r24, 0x03	; 3
 326:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <DIO_voidGetPinValue>

				// If the pin state is still low, register the button press
				if (pinState == DIO_PIN_LOW)
 32a:	89 81       	ldd	r24, Y+1	; 0x01
 32c:	81 11       	cpse	r24, r1
 32e:	25 c0       	rjmp	.+74     	; 0x37a <KEYPAD_voidGetButton+0xf2>
				{
					// Button pressed, determine the corresponding character
					*copy_u8Press = keypadConfig.arr[row][col];
 330:	c7 01       	movw	r24, r14
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	80 0f       	add	r24, r16
 33c:	91 1f       	adc	r25, r17
 33e:	0a 96       	adiw	r24, 0x0a	; 10
 340:	09 2e       	mov	r0, r25
 342:	00 0c       	add	r0, r0
 344:	aa 0b       	sbc	r26, r26
 346:	8b 56       	subi	r24, 0x6B	; 107
 348:	9f 4f       	sbci	r25, 0xFF	; 255
 34a:	af 4f       	sbci	r26, 0xFF	; 255
 34c:	fc 01       	movw	r30, r24
 34e:	84 91       	lpm	r24, Z
 350:	a7 fd       	sbrc	r26, 7
 352:	80 81       	ld	r24, Z
 354:	f6 01       	movw	r30, r12
 356:	80 83       	st	Z, r24

					// Wait until the button is released
					while (pinState == DIO_PIN_LOW)
 358:	0d c0       	rjmp	.+26     	; 0x374 <KEYPAD_voidGetButton+0xec>
					{
						DIO_voidGetPinValue(keypadConfig.COLSPORT, keypadConfig.COLPINS[col], &pinState);
 35a:	ae 01       	movw	r20, r28
 35c:	4f 5f       	subi	r20, 0xFF	; 255
 35e:	5f 4f       	sbci	r21, 0xFF	; 255
 360:	68 2d       	mov	r22, r8
 362:	83 e0       	ldi	r24, 0x03	; 3
 364:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <DIO_voidGetPinValue>
 368:	8f e3       	ldi	r24, 0x3F	; 63
 36a:	9c e9       	ldi	r25, 0x9C	; 156
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <KEYPAD_voidGetButton+0xe4>
 370:	00 c0       	rjmp	.+0      	; 0x372 <KEYPAD_voidGetButton+0xea>
 372:	00 00       	nop
				{
					// Button pressed, determine the corresponding character
					*copy_u8Press = keypadConfig.arr[row][col];

					// Wait until the button is released
					while (pinState == DIO_PIN_LOW)
 374:	89 81       	ldd	r24, Y+1	; 0x01
 376:	88 23       	and	r24, r24
 378:	81 f3       	breq	.-32     	; 0x35a <KEYPAD_voidGetButton+0xd2>
	for (u8 row = 0; row < 4; row++)
	{
		// Activate the current row
		DIO_voidSetPinValue(keypadConfig.ROWS_PORT, keypadConfig.ROWPINS[row], DIO_PIN_LOW);

		for (u8 col = 0; col < 4; col++)
 37a:	b3 94       	inc	r11
 37c:	93 e0       	ldi	r25, 0x03	; 3
 37e:	9b 15       	cp	r25, r11
 380:	08 f0       	brcs	.+2      	; 0x384 <KEYPAD_voidGetButton+0xfc>
 382:	ac cf       	rjmp	.-168    	; 0x2dc <KEYPAD_voidGetButton+0x54>
				}
			}
		}

		// Deactivate the current row
		DIO_voidSetPinValue(keypadConfig.ROWS_PORT, keypadConfig.ROWPINS[row], DIO_PIN_HIGH);
 384:	41 e0       	ldi	r20, 0x01	; 1
 386:	69 2d       	mov	r22, r9
 388:	82 e0       	ldi	r24, 0x02	; 2
 38a:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>

void KEYPAD_voidGetButton(u8 *copy_u8Press)
{
	*copy_u8Press = NOTPRESSED;

	for (u8 row = 0; row < 4; row++)
 38e:	a3 94       	inc	r10
 390:	e3 e0       	ldi	r30, 0x03	; 3
 392:	ea 15       	cp	r30, r10
 394:	08 f0       	brcs	.+2      	; 0x398 <KEYPAD_voidGetButton+0x110>
 396:	8d cf       	rjmp	.-230    	; 0x2b2 <KEYPAD_voidGetButton+0x2a>
		}

		// Deactivate the current row
		DIO_voidSetPinValue(keypadConfig.ROWS_PORT, keypadConfig.ROWPINS[row], DIO_PIN_HIGH);
	}
 398:	0f 90       	pop	r0
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	1f 91       	pop	r17
 3a0:	0f 91       	pop	r16
 3a2:	ff 90       	pop	r15
 3a4:	ef 90       	pop	r14
 3a6:	df 90       	pop	r13
 3a8:	cf 90       	pop	r12
 3aa:	bf 90       	pop	r11
 3ac:	af 90       	pop	r10
 3ae:	9f 90       	pop	r9
 3b0:	8f 90       	pop	r8
 3b2:	08 95       	ret

Disassembly of section .text.LCD_voidWriteCommand:

000003b4 <LCD_voidWriteCommand>:
	_delay_ms(1);
	#endif
}

void LCD_voidWriteCommand(u8 copy_u8command)
{
 3b4:	cf 93       	push	r28
 3b6:	c8 2f       	mov	r28, r24
	#if LCD_4BITS_MODE==1
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_PIN4, GET_BIT(copy_u8command, 7));
 3b8:	48 2f       	mov	r20, r24
 3ba:	44 1f       	adc	r20, r20
 3bc:	44 27       	eor	r20, r20
 3be:	44 1f       	adc	r20, r20
 3c0:	64 e0       	ldi	r22, 0x04	; 4
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_PIN2, GET_BIT(copy_u8command, 6));
 3c8:	c6 fb       	bst	r28, 6
 3ca:	44 27       	eor	r20, r20
 3cc:	40 f9       	bld	r20, 0
 3ce:	62 e0       	ldi	r22, 0x02	; 2
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_PIN1, GET_BIT(copy_u8command, 5));
 3d6:	c5 fb       	bst	r28, 5
 3d8:	44 27       	eor	r20, r20
 3da:	40 f9       	bld	r20, 0
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_PIN0, GET_BIT(copy_u8command, 4));
 3e4:	c4 fb       	bst	r28, 4
 3e6:	44 27       	eor	r20, r20
 3e8:	40 f9       	bld	r20, 0
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
	
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RS_PIN, DIO_PIN_LOW);
 3f2:	40 e0       	ldi	r20, 0x00	; 0
 3f4:	63 e0       	ldi	r22, 0x03	; 3
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
	
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN_PIN, DIO_PIN_HIGH);
 3fc:	41 e0       	ldi	r20, 0x01	; 1
 3fe:	62 e0       	ldi	r22, 0x02	; 2
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
 406:	8f e9       	ldi	r24, 0x9F	; 159
 408:	9f e0       	ldi	r25, 0x0F	; 15
 40a:	01 97       	sbiw	r24, 0x01	; 1
 40c:	f1 f7       	brne	.-4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 410:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN_PIN, DIO_PIN_LOW);
 412:	40 e0       	ldi	r20, 0x00	; 0
 414:	62 e0       	ldi	r22, 0x02	; 2
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
 41c:	8f e9       	ldi	r24, 0x9F	; 159
 41e:	9f e0       	ldi	r25, 0x0F	; 15
 420:	01 97       	sbiw	r24, 0x01	; 1
 422:	f1 f7       	brne	.-4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 424:	00 c0       	rjmp	.+0      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 426:	00 00       	nop
	_delay_ms(2);
	
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_PIN4, GET_BIT(copy_u8command, 3));
 428:	c3 fb       	bst	r28, 3
 42a:	44 27       	eor	r20, r20
 42c:	40 f9       	bld	r20, 0
 42e:	64 e0       	ldi	r22, 0x04	; 4
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_PIN2, GET_BIT(copy_u8command, 2));
 436:	c2 fb       	bst	r28, 2
 438:	44 27       	eor	r20, r20
 43a:	40 f9       	bld	r20, 0
 43c:	62 e0       	ldi	r22, 0x02	; 2
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_PIN1, GET_BIT(copy_u8command, 1));
 444:	c1 fb       	bst	r28, 1
 446:	44 27       	eor	r20, r20
 448:	40 f9       	bld	r20, 0
 44a:	61 e0       	ldi	r22, 0x01	; 1
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_PIN0, GET_BIT(copy_u8command, 0));
 452:	4c 2f       	mov	r20, r28
 454:	41 70       	andi	r20, 0x01	; 1
 456:	60 e0       	ldi	r22, 0x00	; 0
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RS_PIN, DIO_PIN_LOW);
 45e:	40 e0       	ldi	r20, 0x00	; 0
 460:	63 e0       	ldi	r22, 0x03	; 3
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
	
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN_PIN, DIO_PIN_HIGH);
 468:	41 e0       	ldi	r20, 0x01	; 1
 46a:	62 e0       	ldi	r22, 0x02	; 2
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
 472:	8f e9       	ldi	r24, 0x9F	; 159
 474:	9f e0       	ldi	r25, 0x0F	; 15
 476:	01 97       	sbiw	r24, 0x01	; 1
 478:	f1 f7       	brne	.-4      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 47a:	00 c0       	rjmp	.+0      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 47c:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN_PIN, DIO_PIN_LOW);
 47e:	40 e0       	ldi	r20, 0x00	; 0
 480:	62 e0       	ldi	r22, 0x02	; 2
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
 488:	8f e9       	ldi	r24, 0x9F	; 159
 48a:	9f e0       	ldi	r25, 0x0F	; 15
 48c:	01 97       	sbiw	r24, 0x01	; 1
 48e:	f1 f7       	brne	.-4      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 490:	00 c0       	rjmp	.+0      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 492:	00 00       	nop
 494:	8f ec       	ldi	r24, 0xCF	; 207
 496:	97 e0       	ldi	r25, 0x07	; 7
 498:	01 97       	sbiw	r24, 0x01	; 1
 49a:	f1 f7       	brne	.-4      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 49e:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN_PIN, DIO_PIN_LOW);
	_delay_ms(2);
	#endif	
	_delay_ms(1);
}
 4a0:	cf 91       	pop	r28
 4a2:	08 95       	ret

Disassembly of section .text.LCD_voidInit:

000009c8 <LCD_voidInit>:
 9c8:	2f ef       	ldi	r18, 0xFF	; 255
 9ca:	81 ee       	ldi	r24, 0xE1	; 225
 9cc:	94 e0       	ldi	r25, 0x04	; 4
 9ce:	21 50       	subi	r18, 0x01	; 1
 9d0:	80 40       	sbci	r24, 0x00	; 0
 9d2:	90 40       	sbci	r25, 0x00	; 0
 9d4:	e1 f7       	brne	.-8      	; 0x9ce <LCD_voidInit+0x6>
 9d6:	00 c0       	rjmp	.+0      	; 0x9d8 <LCD_voidInit+0x10>
 9d8:	00 00       	nop
void LCD_voidInit()
{
	_delay_ms(200);
	
	#if LCD_4BITS_MODE ==1
	DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_PIN4, DIO_PIN_OUTPUT);
 9da:	41 e0       	ldi	r20, 0x01	; 1
 9dc:	64 e0       	ldi	r22, 0x04	; 4
 9de:	81 e0       	ldi	r24, 0x01	; 1
 9e0:	0e 94 39 03 	call	0x672	; 0x672 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_PIN2, DIO_PIN_OUTPUT);
 9e4:	41 e0       	ldi	r20, 0x01	; 1
 9e6:	62 e0       	ldi	r22, 0x02	; 2
 9e8:	81 e0       	ldi	r24, 0x01	; 1
 9ea:	0e 94 39 03 	call	0x672	; 0x672 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_PIN1, DIO_PIN_OUTPUT);
 9ee:	41 e0       	ldi	r20, 0x01	; 1
 9f0:	61 e0       	ldi	r22, 0x01	; 1
 9f2:	81 e0       	ldi	r24, 0x01	; 1
 9f4:	0e 94 39 03 	call	0x672	; 0x672 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_PIN0, DIO_PIN_OUTPUT);
 9f8:	41 e0       	ldi	r20, 0x01	; 1
 9fa:	60 e0       	ldi	r22, 0x00	; 0
 9fc:	81 e0       	ldi	r24, 0x01	; 1
 9fe:	0e 94 39 03 	call	0x672	; 0x672 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, RS_PIN, DIO_PIN_OUTPUT);
 a02:	41 e0       	ldi	r20, 0x01	; 1
 a04:	63 e0       	ldi	r22, 0x03	; 3
 a06:	80 e0       	ldi	r24, 0x00	; 0
 a08:	0e 94 39 03 	call	0x672	; 0x672 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, EN_PIN, DIO_PIN_OUTPUT);
 a0c:	41 e0       	ldi	r20, 0x01	; 1
 a0e:	62 e0       	ldi	r22, 0x02	; 2
 a10:	80 e0       	ldi	r24, 0x00	; 0
 a12:	0e 94 39 03 	call	0x672	; 0x672 <DIO_voidSetPinDirection>
	
	LCD_voidWriteCommand(RETURN_HOME);
 a16:	82 e0       	ldi	r24, 0x02	; 2
 a18:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_voidWriteCommand>
 a1c:	8f e1       	ldi	r24, 0x1F	; 31
 a1e:	9e e4       	ldi	r25, 0x4E	; 78
 a20:	01 97       	sbiw	r24, 0x01	; 1
 a22:	f1 f7       	brne	.-4      	; 0xa20 <LCD_voidInit+0x58>
 a24:	00 c0       	rjmp	.+0      	; 0xa26 <LCD_voidInit+0x5e>
 a26:	00 00       	nop
	_delay_ms(10);
	LCD_voidWriteCommand(FOUR_BITS);
 a28:	88 e2       	ldi	r24, 0x28	; 40
 a2a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_voidWriteCommand>
 a2e:	8f ec       	ldi	r24, 0xCF	; 207
 a30:	97 e0       	ldi	r25, 0x07	; 7
 a32:	01 97       	sbiw	r24, 0x01	; 1
 a34:	f1 f7       	brne	.-4      	; 0xa32 <LCD_voidInit+0x6a>
 a36:	00 c0       	rjmp	.+0      	; 0xa38 <LCD_voidInit+0x70>
 a38:	00 00       	nop
	
	_delay_ms(1);
	
	LCD_voidWriteCommand(CURSOR_ON_DISPLAN_ON);
 a3a:	8e e0       	ldi	r24, 0x0E	; 14
 a3c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_voidWriteCommand>
 a40:	8f ec       	ldi	r24, 0xCF	; 207
 a42:	97 e0       	ldi	r25, 0x07	; 7
 a44:	01 97       	sbiw	r24, 0x01	; 1
 a46:	f1 f7       	brne	.-4      	; 0xa44 <LCD_voidInit+0x7c>
 a48:	00 c0       	rjmp	.+0      	; 0xa4a <LCD_voidInit+0x82>
 a4a:	00 00       	nop
	
	_delay_ms(1);
	
	LCD_voidWriteCommand(CLR_SCREEN);
 a4c:	81 e0       	ldi	r24, 0x01	; 1
 a4e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_voidWriteCommand>
 a52:	8f e1       	ldi	r24, 0x1F	; 31
 a54:	9e e4       	ldi	r25, 0x4E	; 78
 a56:	01 97       	sbiw	r24, 0x01	; 1
 a58:	f1 f7       	brne	.-4      	; 0xa56 <LCD_voidInit+0x8e>
 a5a:	00 c0       	rjmp	.+0      	; 0xa5c <LCD_voidInit+0x94>
 a5c:	00 00       	nop
	
	_delay_ms(10);
	
	LCD_voidWriteCommand(ENTRY_MODE);
 a5e:	86 e0       	ldi	r24, 0x06	; 6
 a60:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_voidWriteCommand>
 a64:	8f ec       	ldi	r24, 0xCF	; 207
 a66:	97 e0       	ldi	r25, 0x07	; 7
 a68:	01 97       	sbiw	r24, 0x01	; 1
 a6a:	f1 f7       	brne	.-4      	; 0xa68 <LCD_voidInit+0xa0>
 a6c:	00 c0       	rjmp	.+0      	; 0xa6e <LCD_voidInit+0xa6>
 a6e:	00 00       	nop
 a70:	08 95       	ret

Disassembly of section .text.LCD_voidWriteData:

000004a4 <LCD_voidWriteData>:
	_delay_ms(2);
	#endif	
	_delay_ms(1);
}
void LCD_voidWriteData(u8 copy_u8data)
{
 4a4:	cf 93       	push	r28
 4a6:	c8 2f       	mov	r28, r24
	#if LCD_4BITS_MODE==1
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_PIN4, GET_BIT(copy_u8data, 7));
 4a8:	48 2f       	mov	r20, r24
 4aa:	44 1f       	adc	r20, r20
 4ac:	44 27       	eor	r20, r20
 4ae:	44 1f       	adc	r20, r20
 4b0:	64 e0       	ldi	r22, 0x04	; 4
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_PIN2, GET_BIT(copy_u8data, 6));
 4b8:	c6 fb       	bst	r28, 6
 4ba:	44 27       	eor	r20, r20
 4bc:	40 f9       	bld	r20, 0
 4be:	62 e0       	ldi	r22, 0x02	; 2
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_PIN1, GET_BIT(copy_u8data, 5));
 4c6:	c5 fb       	bst	r28, 5
 4c8:	44 27       	eor	r20, r20
 4ca:	40 f9       	bld	r20, 0
 4cc:	61 e0       	ldi	r22, 0x01	; 1
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_PIN0, GET_BIT(copy_u8data, 4));
 4d4:	c4 fb       	bst	r28, 4
 4d6:	44 27       	eor	r20, r20
 4d8:	40 f9       	bld	r20, 0
 4da:	60 e0       	ldi	r22, 0x00	; 0
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
	
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RS_PIN, DIO_PIN_HIGH);
 4e2:	41 e0       	ldi	r20, 0x01	; 1
 4e4:	63 e0       	ldi	r22, 0x03	; 3
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
	
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN_PIN, DIO_PIN_HIGH);
 4ec:	41 e0       	ldi	r20, 0x01	; 1
 4ee:	62 e0       	ldi	r22, 0x02	; 2
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
 4f6:	8f e9       	ldi	r24, 0x9F	; 159
 4f8:	9f e0       	ldi	r25, 0x0F	; 15
 4fa:	01 97       	sbiw	r24, 0x01	; 1
 4fc:	f1 f7       	brne	.-4      	; 0x4fa <LCD_voidWriteData+0x56>
 4fe:	00 c0       	rjmp	.+0      	; 0x500 <LCD_voidWriteData+0x5c>
 500:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN_PIN, DIO_PIN_LOW);
 502:	40 e0       	ldi	r20, 0x00	; 0
 504:	62 e0       	ldi	r22, 0x02	; 2
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
 50c:	8f e9       	ldi	r24, 0x9F	; 159
 50e:	9f e0       	ldi	r25, 0x0F	; 15
 510:	01 97       	sbiw	r24, 0x01	; 1
 512:	f1 f7       	brne	.-4      	; 0x510 <LCD_voidWriteData+0x6c>
 514:	00 c0       	rjmp	.+0      	; 0x516 <LCD_voidWriteData+0x72>
 516:	00 00       	nop
	_delay_ms(2);
	
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_PIN4, GET_BIT(copy_u8data, 3));
 518:	c3 fb       	bst	r28, 3
 51a:	44 27       	eor	r20, r20
 51c:	40 f9       	bld	r20, 0
 51e:	64 e0       	ldi	r22, 0x04	; 4
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_PIN2, GET_BIT(copy_u8data, 2));
 526:	c2 fb       	bst	r28, 2
 528:	44 27       	eor	r20, r20
 52a:	40 f9       	bld	r20, 0
 52c:	62 e0       	ldi	r22, 0x02	; 2
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_PIN1, GET_BIT(copy_u8data, 1));
 534:	c1 fb       	bst	r28, 1
 536:	44 27       	eor	r20, r20
 538:	40 f9       	bld	r20, 0
 53a:	61 e0       	ldi	r22, 0x01	; 1
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_PIN0, GET_BIT(copy_u8data, 0));
 542:	4c 2f       	mov	r20, r28
 544:	41 70       	andi	r20, 0x01	; 1
 546:	60 e0       	ldi	r22, 0x00	; 0
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, RS_PIN, DIO_PIN_HIGH);
 54e:	41 e0       	ldi	r20, 0x01	; 1
 550:	63 e0       	ldi	r22, 0x03	; 3
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
	
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN_PIN, DIO_PIN_HIGH);
 558:	41 e0       	ldi	r20, 0x01	; 1
 55a:	62 e0       	ldi	r22, 0x02	; 2
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
 562:	8f e9       	ldi	r24, 0x9F	; 159
 564:	9f e0       	ldi	r25, 0x0F	; 15
 566:	01 97       	sbiw	r24, 0x01	; 1
 568:	f1 f7       	brne	.-4      	; 0x566 <LCD_voidWriteData+0xc2>
 56a:	00 c0       	rjmp	.+0      	; 0x56c <LCD_voidWriteData+0xc8>
 56c:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN_PIN, DIO_PIN_LOW);
 56e:	40 e0       	ldi	r20, 0x00	; 0
 570:	62 e0       	ldi	r22, 0x02	; 2
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
 578:	8f e9       	ldi	r24, 0x9F	; 159
 57a:	9f e0       	ldi	r25, 0x0F	; 15
 57c:	01 97       	sbiw	r24, 0x01	; 1
 57e:	f1 f7       	brne	.-4      	; 0x57c <LCD_voidWriteData+0xd8>
 580:	00 c0       	rjmp	.+0      	; 0x582 <LCD_voidWriteData+0xde>
 582:	00 00       	nop
 584:	8f ec       	ldi	r24, 0xCF	; 207
 586:	97 e0       	ldi	r25, 0x07	; 7
 588:	01 97       	sbiw	r24, 0x01	; 1
 58a:	f1 f7       	brne	.-4      	; 0x588 <LCD_voidWriteData+0xe4>
 58c:	00 c0       	rjmp	.+0      	; 0x58e <LCD_voidWriteData+0xea>
 58e:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CONTROL_PORT, EN_PIN, DIO_PIN_LOW);
	_delay_ms(2);
	#endif
	_delay_ms(1);	
}
 590:	cf 91       	pop	r28
 592:	08 95       	ret

Disassembly of section .text.LCD_voidWriteString:

00000eb8 <LCD_voidWriteString>:
void LCD_voidWriteString(u8 *copy_str)
{
 eb8:	cf 93       	push	r28
 eba:	df 93       	push	r29
 ebc:	ec 01       	movw	r28, r24
	while((*copy_str)!='\0')
 ebe:	03 c0       	rjmp	.+6      	; 0xec6 <LCD_voidWriteString+0xe>
	{
		LCD_voidWriteData(*copy_str);
 ec0:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LCD_voidWriteData>
		copy_str++;
 ec4:	21 96       	adiw	r28, 0x01	; 1
	#endif
	_delay_ms(1);	
}
void LCD_voidWriteString(u8 *copy_str)
{
	while((*copy_str)!='\0')
 ec6:	88 81       	ld	r24, Y
 ec8:	81 11       	cpse	r24, r1
 eca:	fa cf       	rjmp	.-12     	; 0xec0 <LCD_voidWriteString+0x8>
	{
		LCD_voidWriteData(*copy_str);
		copy_str++;
	}
}
 ecc:	df 91       	pop	r29
 ece:	cf 91       	pop	r28
 ed0:	08 95       	ret

Disassembly of section .text.LCD_voidGoToXY:

00000d66 <LCD_voidGoToXY>:
void LCD_voidGoToXY(u8 copy_u8Row,u8 copy_u8Col)
{
	switch(copy_u8Row)
 d66:	81 30       	cpi	r24, 0x01	; 1
 d68:	59 f0       	breq	.+22     	; 0xd80 <LCD_voidGoToXY+0x1a>
 d6a:	28 f0       	brcs	.+10     	; 0xd76 <LCD_voidGoToXY+0x10>
 d6c:	82 30       	cpi	r24, 0x02	; 2
 d6e:	69 f0       	breq	.+26     	; 0xd8a <LCD_voidGoToXY+0x24>
 d70:	83 30       	cpi	r24, 0x03	; 3
 d72:	81 f0       	breq	.+32     	; 0xd94 <LCD_voidGoToXY+0x2e>
 d74:	13 c0       	rjmp	.+38     	; 0xd9c <LCD_voidGoToXY+0x36>
	{
		case 0:
			LCD_voidWriteCommand(0x80+copy_u8Col);
 d76:	80 e8       	ldi	r24, 0x80	; 128
 d78:	86 0f       	add	r24, r22
 d7a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_voidWriteCommand>
			break;
 d7e:	0e c0       	rjmp	.+28     	; 0xd9c <LCD_voidGoToXY+0x36>
		case 1:
			LCD_voidWriteCommand(0xC0+copy_u8Col);
 d80:	80 ec       	ldi	r24, 0xC0	; 192
 d82:	86 0f       	add	r24, r22
 d84:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_voidWriteCommand>
			break;
 d88:	09 c0       	rjmp	.+18     	; 0xd9c <LCD_voidGoToXY+0x36>
		case 2:
			LCD_voidWriteCommand(0x94+copy_u8Col);
 d8a:	84 e9       	ldi	r24, 0x94	; 148
 d8c:	86 0f       	add	r24, r22
 d8e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_voidWriteCommand>
			break;
 d92:	04 c0       	rjmp	.+8      	; 0xd9c <LCD_voidGoToXY+0x36>
		case 3:
			LCD_voidWriteCommand(0xD4+copy_u8Col);
 d94:	84 ed       	ldi	r24, 0xD4	; 212
 d96:	86 0f       	add	r24, r22
 d98:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_voidWriteCommand>
 d9c:	8f ec       	ldi	r24, 0xCF	; 207
 d9e:	97 e0       	ldi	r25, 0x07	; 7
 da0:	01 97       	sbiw	r24, 0x01	; 1
 da2:	f1 f7       	brne	.-4      	; 0xda0 <LCD_voidGoToXY+0x3a>
 da4:	00 c0       	rjmp	.+0      	; 0xda6 <LCD_voidGoToXY+0x40>
 da6:	00 00       	nop
 da8:	08 95       	ret

Disassembly of section .text.LCD_voidClear:

00000f02 <LCD_voidClear>:
	}
	_delay_ms(1);
}
void LCD_voidClear(void)
{
	LCD_voidWriteCommand(CLR_SCREEN);
 f02:	81 e0       	ldi	r24, 0x01	; 1
 f04:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_voidWriteCommand>
 f08:	8f e1       	ldi	r24, 0x1F	; 31
 f0a:	9e e4       	ldi	r25, 0x4E	; 78
 f0c:	01 97       	sbiw	r24, 0x01	; 1
 f0e:	f1 f7       	brne	.-4      	; 0xf0c <LCD_voidClear+0xa>
 f10:	00 c0       	rjmp	.+0      	; 0xf12 <LCD_voidClear+0x10>
 f12:	00 00       	nop
 f14:	08 95       	ret

Disassembly of section .text.LED_voidInit:

00000f96 <LED_voidInit>:
#include "LED_config.h"
#include "LED_interface.h"

void LED_voidInit()
{
	DIO_voidSetPinDirection(LED_PORT, LED_PIN, DIO_PIN_OUTPUT);
 f96:	41 e0       	ldi	r20, 0x01	; 1
 f98:	61 e0       	ldi	r22, 0x01	; 1
 f9a:	80 e0       	ldi	r24, 0x00	; 0
 f9c:	0e 94 39 03 	call	0x672	; 0x672 <DIO_voidSetPinDirection>
 fa0:	08 95       	ret

Disassembly of section .text.LED_voidTurnOn:

00000fa2 <LED_voidTurnOn>:
}
void LED_voidTurnOn()
{
	DIO_voidSetPinValue(LED_PORT, LED_PIN, DIO_PIN_HIGH);
 fa2:	41 e0       	ldi	r20, 0x01	; 1
 fa4:	61 e0       	ldi	r22, 0x01	; 1
 fa6:	80 e0       	ldi	r24, 0x00	; 0
 fa8:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
 fac:	08 95       	ret

Disassembly of section .text.LED_voidTurnOff:

00000fae <LED_voidTurnOff>:
}
void LED_voidTurnOff()
{
	DIO_voidSetPinValue(LED_PORT, LED_PIN, DIO_PIN_LOW);
 fae:	40 e0       	ldi	r20, 0x00	; 0
 fb0:	61 e0       	ldi	r22, 0x01	; 1
 fb2:	80 e0       	ldi	r24, 0x00	; 0
 fb4:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_voidSetPinValue>
 fb8:	08 95       	ret

Disassembly of section .text.SERVO_voidInit:

00000f2a <SERVO_voidInit>:
#include "DIO_interface.h"
#include "PWM_interface.h"

void SERVO_voidInit(void)
{
	DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN5, DIO_PIN_OUTPUT);
 f2a:	41 e0       	ldi	r20, 0x01	; 1
 f2c:	65 e0       	ldi	r22, 0x05	; 5
 f2e:	83 e0       	ldi	r24, 0x03	; 3
 f30:	0e 94 39 03 	call	0x672	; 0x672 <DIO_voidSetPinDirection>
	PWM_voidInitChannel_1A();
 f34:	0e 94 38 07 	call	0xe70	; 0xe70 <PWM_voidInitChannel_1A>
 f38:	08 95       	ret

Disassembly of section .text.SERVO_voidOn:

00000e32 <SERVO_voidOn>:
}

void SERVO_voidOn(u8 copy_u8Angle)
{
	f32 DutyCycle = (((copy_u8Angle)/180.0)*5)+5;
 e32:	68 2f       	mov	r22, r24
 e34:	70 e0       	ldi	r23, 0x00	; 0
 e36:	80 e0       	ldi	r24, 0x00	; 0
 e38:	90 e0       	ldi	r25, 0x00	; 0
 e3a:	0e 94 87 05 	call	0xb0e	; 0xb0e <__floatsisf>
 e3e:	20 e0       	ldi	r18, 0x00	; 0
 e40:	30 e0       	ldi	r19, 0x00	; 0
 e42:	44 e3       	ldi	r20, 0x34	; 52
 e44:	53 e4       	ldi	r21, 0x43	; 67
 e46:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__divsf3>
 e4a:	20 e0       	ldi	r18, 0x00	; 0
 e4c:	30 e0       	ldi	r19, 0x00	; 0
 e4e:	40 ea       	ldi	r20, 0xA0	; 160
 e50:	50 e4       	ldi	r21, 0x40	; 64
 e52:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__mulsf3>
 e56:	20 e0       	ldi	r18, 0x00	; 0
 e58:	30 e0       	ldi	r19, 0x00	; 0
 e5a:	40 ea       	ldi	r20, 0xA0	; 160
 e5c:	50 e4       	ldi	r21, 0x40	; 64
 e5e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__addsf3>
 e62:	ab 01       	movw	r20, r22
 e64:	bc 01       	movw	r22, r24
	PWM_voidGenerate_PWM_Channel_1A(50, DutyCycle);
 e66:	82 e3       	ldi	r24, 0x32	; 50
 e68:	90 e0       	ldi	r25, 0x00	; 0
 e6a:	0e 94 39 05 	call	0xa72	; 0xa72 <PWM_voidGenerate_PWM_Channel_1A>
 e6e:	08 95       	ret

Disassembly of section .text.SERVO_voidOff:

00000fe0 <SERVO_voidOff>:
}

void SERVO_voidOff()
{
	PWM_voidStop_PWM_Channel_1A();
 fe0:	0e 94 8b 07 	call	0xf16	; 0xf16 <PWM_voidStop_PWM_Channel_1A>
 fe4:	08 95       	ret

Disassembly of section .text.DIO_voidSetPinDirection:

00000672 <DIO_voidSetPinDirection>:
			break;
		case DIO_PORTC:
			TOGG_BIT(DIO_PORTC_R, copy_u8PinId);
			break;
		case DIO_PORTD:
			TOGG_BIT(DIO_PORTD_R, copy_u8PinId);
 672:	81 30       	cpi	r24, 0x01	; 1
 674:	01 f1       	breq	.+64     	; 0x6b6 <DIO_voidSetPinDirection+0x44>
 676:	30 f0       	brcs	.+12     	; 0x684 <DIO_voidSetPinDirection+0x12>
 678:	82 30       	cpi	r24, 0x02	; 2
 67a:	b1 f1       	breq	.+108    	; 0x6e8 <DIO_voidSetPinDirection+0x76>
 67c:	83 30       	cpi	r24, 0x03	; 3
 67e:	09 f4       	brne	.+2      	; 0x682 <DIO_voidSetPinDirection+0x10>
 680:	4c c0       	rjmp	.+152    	; 0x71a <DIO_voidSetPinDirection+0xa8>
 682:	08 95       	ret
 684:	41 11       	cpse	r20, r1
 686:	0c c0       	rjmp	.+24     	; 0x6a0 <DIO_voidSetPinDirection+0x2e>
 688:	2a b3       	in	r18, 0x1a	; 26
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	02 c0       	rjmp	.+4      	; 0x694 <DIO_voidSetPinDirection+0x22>
 690:	88 0f       	add	r24, r24
 692:	99 1f       	adc	r25, r25
 694:	6a 95       	dec	r22
 696:	e2 f7       	brpl	.-8      	; 0x690 <DIO_voidSetPinDirection+0x1e>
 698:	80 95       	com	r24
 69a:	82 23       	and	r24, r18
 69c:	8a bb       	out	0x1a, r24	; 26
 69e:	08 95       	ret
 6a0:	2a b3       	in	r18, 0x1a	; 26
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <DIO_voidSetPinDirection+0x3a>
 6a8:	88 0f       	add	r24, r24
 6aa:	99 1f       	adc	r25, r25
 6ac:	6a 95       	dec	r22
 6ae:	e2 f7       	brpl	.-8      	; 0x6a8 <DIO_voidSetPinDirection+0x36>
 6b0:	82 2b       	or	r24, r18
 6b2:	8a bb       	out	0x1a, r24	; 26
 6b4:	08 95       	ret
 6b6:	41 11       	cpse	r20, r1
 6b8:	0c c0       	rjmp	.+24     	; 0x6d2 <DIO_voidSetPinDirection+0x60>
 6ba:	27 b3       	in	r18, 0x17	; 23
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <DIO_voidSetPinDirection+0x54>
 6c2:	88 0f       	add	r24, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	6a 95       	dec	r22
 6c8:	e2 f7       	brpl	.-8      	; 0x6c2 <DIO_voidSetPinDirection+0x50>
 6ca:	80 95       	com	r24
 6cc:	82 23       	and	r24, r18
 6ce:	87 bb       	out	0x17, r24	; 23
 6d0:	08 95       	ret
 6d2:	27 b3       	in	r18, 0x17	; 23
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <DIO_voidSetPinDirection+0x6c>
 6da:	88 0f       	add	r24, r24
 6dc:	99 1f       	adc	r25, r25
 6de:	6a 95       	dec	r22
 6e0:	e2 f7       	brpl	.-8      	; 0x6da <DIO_voidSetPinDirection+0x68>
 6e2:	82 2b       	or	r24, r18
 6e4:	87 bb       	out	0x17, r24	; 23
 6e6:	08 95       	ret
 6e8:	41 11       	cpse	r20, r1
 6ea:	0c c0       	rjmp	.+24     	; 0x704 <DIO_voidSetPinDirection+0x92>
 6ec:	24 b3       	in	r18, 0x14	; 20
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <DIO_voidSetPinDirection+0x86>
 6f4:	88 0f       	add	r24, r24
 6f6:	99 1f       	adc	r25, r25
 6f8:	6a 95       	dec	r22
 6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <DIO_voidSetPinDirection+0x82>
 6fc:	80 95       	com	r24
 6fe:	82 23       	and	r24, r18
 700:	84 bb       	out	0x14, r24	; 20
 702:	08 95       	ret
 704:	24 b3       	in	r18, 0x14	; 20
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	02 c0       	rjmp	.+4      	; 0x710 <DIO_voidSetPinDirection+0x9e>
 70c:	88 0f       	add	r24, r24
 70e:	99 1f       	adc	r25, r25
 710:	6a 95       	dec	r22
 712:	e2 f7       	brpl	.-8      	; 0x70c <DIO_voidSetPinDirection+0x9a>
 714:	82 2b       	or	r24, r18
 716:	84 bb       	out	0x14, r24	; 20
 718:	08 95       	ret
 71a:	41 11       	cpse	r20, r1
 71c:	0c c0       	rjmp	.+24     	; 0x736 <DIO_voidSetPinDirection+0xc4>
 71e:	21 b3       	in	r18, 0x11	; 17
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	02 c0       	rjmp	.+4      	; 0x72a <DIO_voidSetPinDirection+0xb8>
 726:	88 0f       	add	r24, r24
 728:	99 1f       	adc	r25, r25
 72a:	6a 95       	dec	r22
 72c:	e2 f7       	brpl	.-8      	; 0x726 <DIO_voidSetPinDirection+0xb4>
 72e:	80 95       	com	r24
 730:	82 23       	and	r24, r18
 732:	81 bb       	out	0x11, r24	; 17
 734:	08 95       	ret
 736:	21 b3       	in	r18, 0x11	; 17
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	02 c0       	rjmp	.+4      	; 0x742 <DIO_voidSetPinDirection+0xd0>
 73e:	88 0f       	add	r24, r24
 740:	99 1f       	adc	r25, r25
 742:	6a 95       	dec	r22
 744:	e2 f7       	brpl	.-8      	; 0x73e <DIO_voidSetPinDirection+0xcc>
 746:	82 2b       	or	r24, r18
 748:	81 bb       	out	0x11, r24	; 17
 74a:	08 95       	ret

Disassembly of section .text.DIO_voidSetPinValue:

0000074c <DIO_voidSetPinValue>:
 74c:	81 30       	cpi	r24, 0x01	; 1
 74e:	01 f1       	breq	.+64     	; 0x790 <DIO_voidSetPinValue+0x44>
 750:	30 f0       	brcs	.+12     	; 0x75e <DIO_voidSetPinValue+0x12>
 752:	82 30       	cpi	r24, 0x02	; 2
 754:	b1 f1       	breq	.+108    	; 0x7c2 <DIO_voidSetPinValue+0x76>
 756:	83 30       	cpi	r24, 0x03	; 3
 758:	09 f4       	brne	.+2      	; 0x75c <DIO_voidSetPinValue+0x10>
 75a:	4c c0       	rjmp	.+152    	; 0x7f4 <DIO_voidSetPinValue+0xa8>
 75c:	08 95       	ret
 75e:	41 11       	cpse	r20, r1
 760:	0c c0       	rjmp	.+24     	; 0x77a <DIO_voidSetPinValue+0x2e>
 762:	2b b3       	in	r18, 0x1b	; 27
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	02 c0       	rjmp	.+4      	; 0x76e <DIO_voidSetPinValue+0x22>
 76a:	88 0f       	add	r24, r24
 76c:	99 1f       	adc	r25, r25
 76e:	6a 95       	dec	r22
 770:	e2 f7       	brpl	.-8      	; 0x76a <DIO_voidSetPinValue+0x1e>
 772:	80 95       	com	r24
 774:	82 23       	and	r24, r18
 776:	8b bb       	out	0x1b, r24	; 27
 778:	08 95       	ret
 77a:	2b b3       	in	r18, 0x1b	; 27
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	02 c0       	rjmp	.+4      	; 0x786 <DIO_voidSetPinValue+0x3a>
 782:	88 0f       	add	r24, r24
 784:	99 1f       	adc	r25, r25
 786:	6a 95       	dec	r22
 788:	e2 f7       	brpl	.-8      	; 0x782 <DIO_voidSetPinValue+0x36>
 78a:	82 2b       	or	r24, r18
 78c:	8b bb       	out	0x1b, r24	; 27
 78e:	08 95       	ret
 790:	41 11       	cpse	r20, r1
 792:	0c c0       	rjmp	.+24     	; 0x7ac <DIO_voidSetPinValue+0x60>
 794:	28 b3       	in	r18, 0x18	; 24
 796:	81 e0       	ldi	r24, 0x01	; 1
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <DIO_voidSetPinValue+0x54>
 79c:	88 0f       	add	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	6a 95       	dec	r22
 7a2:	e2 f7       	brpl	.-8      	; 0x79c <DIO_voidSetPinValue+0x50>
 7a4:	80 95       	com	r24
 7a6:	82 23       	and	r24, r18
 7a8:	88 bb       	out	0x18, r24	; 24
 7aa:	08 95       	ret
 7ac:	28 b3       	in	r18, 0x18	; 24
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <DIO_voidSetPinValue+0x6c>
 7b4:	88 0f       	add	r24, r24
 7b6:	99 1f       	adc	r25, r25
 7b8:	6a 95       	dec	r22
 7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <DIO_voidSetPinValue+0x68>
 7bc:	82 2b       	or	r24, r18
 7be:	88 bb       	out	0x18, r24	; 24
 7c0:	08 95       	ret
 7c2:	41 11       	cpse	r20, r1
 7c4:	0c c0       	rjmp	.+24     	; 0x7de <DIO_voidSetPinValue+0x92>
 7c6:	25 b3       	in	r18, 0x15	; 21
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <DIO_voidSetPinValue+0x86>
 7ce:	88 0f       	add	r24, r24
 7d0:	99 1f       	adc	r25, r25
 7d2:	6a 95       	dec	r22
 7d4:	e2 f7       	brpl	.-8      	; 0x7ce <DIO_voidSetPinValue+0x82>
 7d6:	80 95       	com	r24
 7d8:	82 23       	and	r24, r18
 7da:	85 bb       	out	0x15, r24	; 21
 7dc:	08 95       	ret
 7de:	25 b3       	in	r18, 0x15	; 21
 7e0:	81 e0       	ldi	r24, 0x01	; 1
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	02 c0       	rjmp	.+4      	; 0x7ea <DIO_voidSetPinValue+0x9e>
 7e6:	88 0f       	add	r24, r24
 7e8:	99 1f       	adc	r25, r25
 7ea:	6a 95       	dec	r22
 7ec:	e2 f7       	brpl	.-8      	; 0x7e6 <DIO_voidSetPinValue+0x9a>
 7ee:	82 2b       	or	r24, r18
 7f0:	85 bb       	out	0x15, r24	; 21
 7f2:	08 95       	ret
 7f4:	41 11       	cpse	r20, r1
 7f6:	0c c0       	rjmp	.+24     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7f8:	22 b3       	in	r18, 0x12	; 18
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	02 c0       	rjmp	.+4      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 800:	88 0f       	add	r24, r24
 802:	99 1f       	adc	r25, r25
 804:	6a 95       	dec	r22
 806:	e2 f7       	brpl	.-8      	; 0x800 <__DATA_REGION_LENGTH__>
 808:	80 95       	com	r24
 80a:	82 23       	and	r24, r18
 80c:	82 bb       	out	0x12, r24	; 18
 80e:	08 95       	ret
 810:	22 b3       	in	r18, 0x12	; 18
 812:	81 e0       	ldi	r24, 0x01	; 1
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	02 c0       	rjmp	.+4      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 818:	88 0f       	add	r24, r24
 81a:	99 1f       	adc	r25, r25
 81c:	6a 95       	dec	r22
 81e:	e2 f7       	brpl	.-8      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 820:	82 2b       	or	r24, r18
 822:	82 bb       	out	0x12, r24	; 18
 824:	08 95       	ret

Disassembly of section .text.DIO_voidGetPinValue:

00000bf0 <DIO_voidGetPinValue>:
 bf0:	81 30       	cpi	r24, 0x01	; 1
 bf2:	89 f0       	breq	.+34     	; 0xc16 <DIO_voidGetPinValue+0x26>
 bf4:	28 f0       	brcs	.+10     	; 0xc00 <DIO_voidGetPinValue+0x10>
 bf6:	82 30       	cpi	r24, 0x02	; 2
 bf8:	c9 f0       	breq	.+50     	; 0xc2c <DIO_voidGetPinValue+0x3c>
 bfa:	83 30       	cpi	r24, 0x03	; 3
 bfc:	11 f1       	breq	.+68     	; 0xc42 <DIO_voidGetPinValue+0x52>
 bfe:	08 95       	ret
 c00:	89 b3       	in	r24, 0x19	; 25
 c02:	90 e0       	ldi	r25, 0x00	; 0
 c04:	02 c0       	rjmp	.+4      	; 0xc0a <DIO_voidGetPinValue+0x1a>
 c06:	95 95       	asr	r25
 c08:	87 95       	ror	r24
 c0a:	6a 95       	dec	r22
 c0c:	e2 f7       	brpl	.-8      	; 0xc06 <DIO_voidGetPinValue+0x16>
 c0e:	81 70       	andi	r24, 0x01	; 1
 c10:	fa 01       	movw	r30, r20
 c12:	80 83       	st	Z, r24
 c14:	08 95       	ret
 c16:	86 b3       	in	r24, 0x16	; 22
 c18:	90 e0       	ldi	r25, 0x00	; 0
 c1a:	02 c0       	rjmp	.+4      	; 0xc20 <DIO_voidGetPinValue+0x30>
 c1c:	95 95       	asr	r25
 c1e:	87 95       	ror	r24
 c20:	6a 95       	dec	r22
 c22:	e2 f7       	brpl	.-8      	; 0xc1c <DIO_voidGetPinValue+0x2c>
 c24:	81 70       	andi	r24, 0x01	; 1
 c26:	fa 01       	movw	r30, r20
 c28:	80 83       	st	Z, r24
 c2a:	08 95       	ret
 c2c:	83 b3       	in	r24, 0x13	; 19
 c2e:	90 e0       	ldi	r25, 0x00	; 0
 c30:	02 c0       	rjmp	.+4      	; 0xc36 <DIO_voidGetPinValue+0x46>
 c32:	95 95       	asr	r25
 c34:	87 95       	ror	r24
 c36:	6a 95       	dec	r22
 c38:	e2 f7       	brpl	.-8      	; 0xc32 <DIO_voidGetPinValue+0x42>
 c3a:	81 70       	andi	r24, 0x01	; 1
 c3c:	fa 01       	movw	r30, r20
 c3e:	80 83       	st	Z, r24
 c40:	08 95       	ret
 c42:	80 b3       	in	r24, 0x10	; 16
 c44:	90 e0       	ldi	r25, 0x00	; 0
 c46:	02 c0       	rjmp	.+4      	; 0xc4c <DIO_voidGetPinValue+0x5c>
 c48:	95 95       	asr	r25
 c4a:	87 95       	ror	r24
 c4c:	6a 95       	dec	r22
 c4e:	e2 f7       	brpl	.-8      	; 0xc48 <DIO_voidGetPinValue+0x58>
 c50:	81 70       	andi	r24, 0x01	; 1
 c52:	fa 01       	movw	r30, r20
 c54:	80 83       	st	Z, r24
 c56:	08 95       	ret

Disassembly of section .text.DIO_voidActivePinPullUpResistance:

00000c58 <DIO_voidActivePinPullUpResistance>:
			break;
	}
}
void DIO_voidActivePinPullUpResistance(u8 copy_u8PortId, u8 copy_u8PinId)
{
	switch(copy_u8PortId)
 c58:	81 30       	cpi	r24, 0x01	; 1
 c5a:	89 f0       	breq	.+34     	; 0xc7e <DIO_voidActivePinPullUpResistance+0x26>
 c5c:	28 f0       	brcs	.+10     	; 0xc68 <DIO_voidActivePinPullUpResistance+0x10>
 c5e:	82 30       	cpi	r24, 0x02	; 2
 c60:	c9 f0       	breq	.+50     	; 0xc94 <DIO_voidActivePinPullUpResistance+0x3c>
 c62:	83 30       	cpi	r24, 0x03	; 3
 c64:	11 f1       	breq	.+68     	; 0xcaa <DIO_voidActivePinPullUpResistance+0x52>
 c66:	08 95       	ret
	{
		case DIO_PORTA:
			SET_BIT(DIO_PORTA_R, copy_u8PinId);
 c68:	2b b3       	in	r18, 0x1b	; 27
 c6a:	81 e0       	ldi	r24, 0x01	; 1
 c6c:	90 e0       	ldi	r25, 0x00	; 0
 c6e:	02 c0       	rjmp	.+4      	; 0xc74 <DIO_voidActivePinPullUpResistance+0x1c>
 c70:	88 0f       	add	r24, r24
 c72:	99 1f       	adc	r25, r25
 c74:	6a 95       	dec	r22
 c76:	e2 f7       	brpl	.-8      	; 0xc70 <DIO_voidActivePinPullUpResistance+0x18>
 c78:	82 2b       	or	r24, r18
 c7a:	8b bb       	out	0x1b, r24	; 27
			break;
 c7c:	08 95       	ret
		case DIO_PORTB:
			SET_BIT(DIO_PORTB_R, copy_u8PinId);
 c7e:	28 b3       	in	r18, 0x18	; 24
 c80:	81 e0       	ldi	r24, 0x01	; 1
 c82:	90 e0       	ldi	r25, 0x00	; 0
 c84:	02 c0       	rjmp	.+4      	; 0xc8a <DIO_voidActivePinPullUpResistance+0x32>
 c86:	88 0f       	add	r24, r24
 c88:	99 1f       	adc	r25, r25
 c8a:	6a 95       	dec	r22
 c8c:	e2 f7       	brpl	.-8      	; 0xc86 <DIO_voidActivePinPullUpResistance+0x2e>
 c8e:	82 2b       	or	r24, r18
 c90:	88 bb       	out	0x18, r24	; 24
			break;
 c92:	08 95       	ret
		case DIO_PORTC:
			SET_BIT(DIO_PORTC_R, copy_u8PinId);
 c94:	25 b3       	in	r18, 0x15	; 21
 c96:	81 e0       	ldi	r24, 0x01	; 1
 c98:	90 e0       	ldi	r25, 0x00	; 0
 c9a:	02 c0       	rjmp	.+4      	; 0xca0 <DIO_voidActivePinPullUpResistance+0x48>
 c9c:	88 0f       	add	r24, r24
 c9e:	99 1f       	adc	r25, r25
 ca0:	6a 95       	dec	r22
 ca2:	e2 f7       	brpl	.-8      	; 0xc9c <DIO_voidActivePinPullUpResistance+0x44>
 ca4:	82 2b       	or	r24, r18
 ca6:	85 bb       	out	0x15, r24	; 21
			break;
 ca8:	08 95       	ret
		case DIO_PORTD:
			SET_BIT(DIO_PORTD_R, copy_u8PinId);
 caa:	22 b3       	in	r18, 0x12	; 18
 cac:	81 e0       	ldi	r24, 0x01	; 1
 cae:	90 e0       	ldi	r25, 0x00	; 0
 cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <DIO_voidActivePinPullUpResistance+0x5e>
 cb2:	88 0f       	add	r24, r24
 cb4:	99 1f       	adc	r25, r25
 cb6:	6a 95       	dec	r22
 cb8:	e2 f7       	brpl	.-8      	; 0xcb2 <DIO_voidActivePinPullUpResistance+0x5a>
 cba:	82 2b       	or	r24, r18
 cbc:	82 bb       	out	0x12, r24	; 18
 cbe:	08 95       	ret

Disassembly of section .text.PWM_voidInitChannel_1A:

00000e70 <PWM_voidInitChannel_1A>:


void PWM_voidInitChannel_1A			(void)
{
	//select mode 14
	CLR_BIT(TMR1_REG->TCCR1A, TCCR1A_WGM10);
 e70:	8f b5       	in	r24, 0x2f	; 47
 e72:	8e 7f       	andi	r24, 0xFE	; 254
 e74:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TMR1_REG->TCCR1A, TCCR1A_WGM11);
 e76:	8f b5       	in	r24, 0x2f	; 47
 e78:	82 60       	ori	r24, 0x02	; 2
 e7a:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TMR1_REG->TCCR1B, TCCR1B_WGM12);
 e7c:	8e b5       	in	r24, 0x2e	; 46
 e7e:	88 60       	ori	r24, 0x08	; 8
 e80:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TMR1_REG->TCCR1B, TCCR1B_WGM13);
 e82:	8e b5       	in	r24, 0x2e	; 46
 e84:	80 61       	ori	r24, 0x10	; 16
 e86:	8e bd       	out	0x2e, r24	; 46
	
	#if PWM_COMPARE_OUTPUT_MODE_CH1A == PWM_NON_INVERTING_MODE
	//select noninverting mode
	CLR_BIT(TMR1_REG->TCCR1A, TCCR1A_COM1A0);
 e88:	8f b5       	in	r24, 0x2f	; 47
 e8a:	8f 7b       	andi	r24, 0xBF	; 191
 e8c:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TMR1_REG->TCCR1A, TCCR1A_COM1A1);
 e8e:	8f b5       	in	r24, 0x2f	; 47
 e90:	80 68       	ori	r24, 0x80	; 128
 e92:	8f bd       	out	0x2f, r24	; 47
 e94:	08 95       	ret

Disassembly of section .text.PWM_voidGenerate_PWM_Channel_1A:

00000a72 <PWM_voidGenerate_PWM_Channel_1A>:
	}
}
void PWM_voidStop_PWM_Channel_0()
{
	// Disable PWM by clearing the PWM control register (TCCR0)
	TCCR0_REG =0;
 a72:	cf 92       	push	r12
 a74:	df 92       	push	r13
 a76:	ef 92       	push	r14
 a78:	ff 92       	push	r15
 a7a:	cf 93       	push	r28
 a7c:	df 93       	push	r29
 a7e:	ec 01       	movw	r28, r24
 a80:	6a 01       	movw	r12, r20
 a82:	7b 01       	movw	r14, r22
 a84:	20 e0       	ldi	r18, 0x00	; 0
 a86:	30 e0       	ldi	r19, 0x00	; 0
 a88:	48 ec       	ldi	r20, 0xC8	; 200
 a8a:	52 e4       	ldi	r21, 0x42	; 66
 a8c:	c7 01       	movw	r24, r14
 a8e:	b6 01       	movw	r22, r12
 a90:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__cmpsf2>
 a94:	18 16       	cp	r1, r24
 a96:	94 f1       	brlt	.+100    	; 0xafc <PWM_voidGenerate_PWM_Channel_1A+0x8a>
 a98:	9e 01       	movw	r18, r28
 a9a:	40 e0       	ldi	r20, 0x00	; 0
 a9c:	50 e0       	ldi	r21, 0x00	; 0
 a9e:	60 e9       	ldi	r22, 0x90	; 144
 aa0:	70 ed       	ldi	r23, 0xD0	; 208
 aa2:	83 e0       	ldi	r24, 0x03	; 3
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	0e 94 f7 06 	call	0xdee	; 0xdee <__udivmodsi4>
 aaa:	21 50       	subi	r18, 0x01	; 1
 aac:	31 09       	sbc	r19, r1
 aae:	37 bd       	out	0x27, r19	; 39
 ab0:	26 bd       	out	0x26, r18	; 38
 ab2:	66 b5       	in	r22, 0x26	; 38
 ab4:	77 b5       	in	r23, 0x27	; 39
 ab6:	6f 5f       	subi	r22, 0xFF	; 255
 ab8:	7f 4f       	sbci	r23, 0xFF	; 255
 aba:	80 e0       	ldi	r24, 0x00	; 0
 abc:	90 e0       	ldi	r25, 0x00	; 0
 abe:	0e 94 85 05 	call	0xb0a	; 0xb0a <__floatunsisf>
 ac2:	a7 01       	movw	r20, r14
 ac4:	96 01       	movw	r18, r12
 ac6:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__mulsf3>
 aca:	20 e0       	ldi	r18, 0x00	; 0
 acc:	30 e0       	ldi	r19, 0x00	; 0
 ace:	48 ec       	ldi	r20, 0xC8	; 200
 ad0:	52 e4       	ldi	r21, 0x42	; 66
 ad2:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__divsf3>
 ad6:	20 e0       	ldi	r18, 0x00	; 0
 ad8:	30 e0       	ldi	r19, 0x00	; 0
 ada:	40 e8       	ldi	r20, 0x80	; 128
 adc:	5f e3       	ldi	r21, 0x3F	; 63
 ade:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__subsf3>
 ae2:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__fixunssfsi>
 ae6:	7b bd       	out	0x2b, r23	; 43
 ae8:	6a bd       	out	0x2a, r22	; 42
 aea:	8e b5       	in	r24, 0x2e	; 46
 aec:	81 60       	ori	r24, 0x01	; 1
 aee:	8e bd       	out	0x2e, r24	; 46
 af0:	8e b5       	in	r24, 0x2e	; 46
 af2:	82 60       	ori	r24, 0x02	; 2
 af4:	8e bd       	out	0x2e, r24	; 46
 af6:	8e b5       	in	r24, 0x2e	; 46
 af8:	8b 7f       	andi	r24, 0xFB	; 251
 afa:	8e bd       	out	0x2e, r24	; 46
 afc:	df 91       	pop	r29
 afe:	cf 91       	pop	r28
 b00:	ff 90       	pop	r15
 b02:	ef 90       	pop	r14
 b04:	df 90       	pop	r13
 b06:	cf 90       	pop	r12
 b08:	08 95       	ret

Disassembly of section .text.PWM_voidStop_PWM_Channel_1A:

00000f16 <PWM_voidStop_PWM_Channel_1A>:
	CLR_BIT(TMR1_REG->TCCR1B, TCCR1B_WGM12);
	CLR_BIT(TMR1_REG->TCCR1B, TCCR1B_WGM13);
	CLR_BIT(TMR1_REG->TCCR1A, TCCR1A_COM1A0);
	CLR_BIT(TMR1_REG->TCCR1A, TCCR1A_COM1A1);
	*/
	CLR_BIT(TMR1_REG->TCCR1B, TCCR1B_CS10);
 f16:	8e b5       	in	r24, 0x2e	; 46
 f18:	8e 7f       	andi	r24, 0xFE	; 254
 f1a:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TMR1_REG->TCCR1B, TCCR1B_CS11);
 f1c:	8e b5       	in	r24, 0x2e	; 46
 f1e:	8d 7f       	andi	r24, 0xFD	; 253
 f20:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TMR1_REG->TCCR1B, TCCR1B_CS12);
 f22:	8e b5       	in	r24, 0x2e	; 46
 f24:	8b 7f       	andi	r24, 0xFB	; 251
 f26:	8e bd       	out	0x2e, r24	; 46
 f28:	08 95       	ret

Disassembly of section .text:

00000f3a <__subsf3>:
 f3a:	50 58       	subi	r21, 0x80	; 128

00000f3c <__addsf3>:
 f3c:	bb 27       	eor	r27, r27
 f3e:	aa 27       	eor	r26, r26
 f40:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__addsf3x>
 f44:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <__fp_round>

Disassembly of section .text:

000008fa <__addsf3x>:
 8fa:	11 c0       	rjmp	.+34     	; 0x91e <__addsf3x+0x24>
 8fc:	0e 94 a4 07 	call	0xf48	; 0xf48 <__fp_pscA>
 900:	38 f0       	brcs	.+14     	; 0x910 <__addsf3x+0x16>
 902:	0e 94 ab 07 	call	0xf56	; 0xf56 <__fp_pscB>
 906:	20 f0       	brcs	.+8      	; 0x910 <__addsf3x+0x16>
 908:	39 f4       	brne	.+14     	; 0x918 <__addsf3x+0x1e>
 90a:	9f 3f       	cpi	r25, 0xFF	; 255
 90c:	19 f4       	brne	.+6      	; 0x914 <__addsf3x+0x1a>
 90e:	26 f4       	brtc	.+8      	; 0x918 <__addsf3x+0x1e>
 910:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <__fp_nan>
 914:	0e f4       	brtc	.+2      	; 0x918 <__addsf3x+0x1e>
 916:	e0 95       	com	r30
 918:	e7 fb       	bst	r30, 7
 91a:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__fp_inf>
 91e:	e9 2f       	mov	r30, r25
 920:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__fp_split3>
 924:	58 f3       	brcs	.-42     	; 0x8fc <__addsf3x+0x2>
 926:	ba 17       	cp	r27, r26
 928:	62 07       	cpc	r22, r18
 92a:	73 07       	cpc	r23, r19
 92c:	84 07       	cpc	r24, r20
 92e:	95 07       	cpc	r25, r21
 930:	20 f0       	brcs	.+8      	; 0x93a <__addsf3x+0x40>
 932:	79 f4       	brne	.+30     	; 0x952 <__addsf3x+0x58>
 934:	a6 f5       	brtc	.+104    	; 0x99e <__addsf3x+0xa4>
 936:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <__fp_zero>
 93a:	0e f4       	brtc	.+2      	; 0x93e <__addsf3x+0x44>
 93c:	e0 95       	com	r30
 93e:	0b 2e       	mov	r0, r27
 940:	ba 2f       	mov	r27, r26
 942:	a0 2d       	mov	r26, r0
 944:	0b 01       	movw	r0, r22
 946:	b9 01       	movw	r22, r18
 948:	90 01       	movw	r18, r0
 94a:	0c 01       	movw	r0, r24
 94c:	ca 01       	movw	r24, r20
 94e:	a0 01       	movw	r20, r0
 950:	11 24       	eor	r1, r1
 952:	ff 27       	eor	r31, r31
 954:	59 1b       	sub	r21, r25
 956:	99 f0       	breq	.+38     	; 0x97e <__addsf3x+0x84>
 958:	59 3f       	cpi	r21, 0xF9	; 249
 95a:	50 f4       	brcc	.+20     	; 0x970 <__addsf3x+0x76>
 95c:	50 3e       	cpi	r21, 0xE0	; 224
 95e:	68 f1       	brcs	.+90     	; 0x9ba <__addsf3x+0xc0>
 960:	1a 16       	cp	r1, r26
 962:	f0 40       	sbci	r31, 0x00	; 0
 964:	a2 2f       	mov	r26, r18
 966:	23 2f       	mov	r18, r19
 968:	34 2f       	mov	r19, r20
 96a:	44 27       	eor	r20, r20
 96c:	58 5f       	subi	r21, 0xF8	; 248
 96e:	f3 cf       	rjmp	.-26     	; 0x956 <__addsf3x+0x5c>
 970:	46 95       	lsr	r20
 972:	37 95       	ror	r19
 974:	27 95       	ror	r18
 976:	a7 95       	ror	r26
 978:	f0 40       	sbci	r31, 0x00	; 0
 97a:	53 95       	inc	r21
 97c:	c9 f7       	brne	.-14     	; 0x970 <__addsf3x+0x76>
 97e:	7e f4       	brtc	.+30     	; 0x99e <__addsf3x+0xa4>
 980:	1f 16       	cp	r1, r31
 982:	ba 0b       	sbc	r27, r26
 984:	62 0b       	sbc	r22, r18
 986:	73 0b       	sbc	r23, r19
 988:	84 0b       	sbc	r24, r20
 98a:	ba f0       	brmi	.+46     	; 0x9ba <__addsf3x+0xc0>
 98c:	91 50       	subi	r25, 0x01	; 1
 98e:	a1 f0       	breq	.+40     	; 0x9b8 <__addsf3x+0xbe>
 990:	ff 0f       	add	r31, r31
 992:	bb 1f       	adc	r27, r27
 994:	66 1f       	adc	r22, r22
 996:	77 1f       	adc	r23, r23
 998:	88 1f       	adc	r24, r24
 99a:	c2 f7       	brpl	.-16     	; 0x98c <__addsf3x+0x92>
 99c:	0e c0       	rjmp	.+28     	; 0x9ba <__addsf3x+0xc0>
 99e:	ba 0f       	add	r27, r26
 9a0:	62 1f       	adc	r22, r18
 9a2:	73 1f       	adc	r23, r19
 9a4:	84 1f       	adc	r24, r20
 9a6:	48 f4       	brcc	.+18     	; 0x9ba <__addsf3x+0xc0>
 9a8:	87 95       	ror	r24
 9aa:	77 95       	ror	r23
 9ac:	67 95       	ror	r22
 9ae:	b7 95       	ror	r27
 9b0:	f7 95       	ror	r31
 9b2:	9e 3f       	cpi	r25, 0xFE	; 254
 9b4:	08 f0       	brcs	.+2      	; 0x9b8 <__addsf3x+0xbe>
 9b6:	b0 cf       	rjmp	.-160    	; 0x918 <__addsf3x+0x1e>
 9b8:	93 95       	inc	r25
 9ba:	88 0f       	add	r24, r24
 9bc:	08 f0       	brcs	.+2      	; 0x9c0 <__addsf3x+0xc6>
 9be:	99 27       	eor	r25, r25
 9c0:	ee 0f       	add	r30, r30
 9c2:	97 95       	ror	r25
 9c4:	87 95       	ror	r24
 9c6:	08 95       	ret

Disassembly of section .text:

00000fc6 <__cmpsf2>:
 fc6:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__fp_cmp>
 fca:	08 f4       	brcc	.+2      	; 0xfce <__cmpsf2+0x8>
 fcc:	81 e0       	ldi	r24, 0x01	; 1
 fce:	08 95       	ret

Disassembly of section .text:

00000fd0 <__divsf3>:
 fd0:	0e 94 ca 02 	call	0x594	; 0x594 <__divsf3x>
 fd4:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <__fp_round>

Disassembly of section .text:

00000594 <__divsf3x>:
 594:	10 c0       	rjmp	.+32     	; 0x5b6 <__divsf3x+0x22>
 596:	0e 94 ab 07 	call	0xf56	; 0xf56 <__fp_pscB>
 59a:	58 f0       	brcs	.+22     	; 0x5b2 <__divsf3x+0x1e>
 59c:	0e 94 a4 07 	call	0xf48	; 0xf48 <__fp_pscA>
 5a0:	40 f0       	brcs	.+16     	; 0x5b2 <__divsf3x+0x1e>
 5a2:	29 f4       	brne	.+10     	; 0x5ae <__divsf3x+0x1a>
 5a4:	5f 3f       	cpi	r21, 0xFF	; 255
 5a6:	29 f0       	breq	.+10     	; 0x5b2 <__divsf3x+0x1e>
 5a8:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__fp_inf>
 5ac:	51 11       	cpse	r21, r1
 5ae:	0c 94 b3 07 	jmp	0xf66	; 0xf66 <__fp_szero>
 5b2:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <__fp_nan>
 5b6:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__fp_split3>
 5ba:	68 f3       	brcs	.-38     	; 0x596 <__divsf3x+0x2>

000005bc <__divsf3_pse>:
 5bc:	99 23       	and	r25, r25
 5be:	b1 f3       	breq	.-20     	; 0x5ac <__divsf3x+0x18>
 5c0:	55 23       	and	r21, r21
 5c2:	91 f3       	breq	.-28     	; 0x5a8 <__divsf3x+0x14>
 5c4:	95 1b       	sub	r25, r21
 5c6:	55 0b       	sbc	r21, r21
 5c8:	bb 27       	eor	r27, r27
 5ca:	aa 27       	eor	r26, r26
 5cc:	62 17       	cp	r22, r18
 5ce:	73 07       	cpc	r23, r19
 5d0:	84 07       	cpc	r24, r20
 5d2:	38 f0       	brcs	.+14     	; 0x5e2 <__divsf3_pse+0x26>
 5d4:	9f 5f       	subi	r25, 0xFF	; 255
 5d6:	5f 4f       	sbci	r21, 0xFF	; 255
 5d8:	22 0f       	add	r18, r18
 5da:	33 1f       	adc	r19, r19
 5dc:	44 1f       	adc	r20, r20
 5de:	aa 1f       	adc	r26, r26
 5e0:	a9 f3       	breq	.-22     	; 0x5cc <__divsf3_pse+0x10>
 5e2:	35 d0       	rcall	.+106    	; 0x64e <__divsf3_pse+0x92>
 5e4:	0e 2e       	mov	r0, r30
 5e6:	3a f0       	brmi	.+14     	; 0x5f6 <__divsf3_pse+0x3a>
 5e8:	e0 e8       	ldi	r30, 0x80	; 128
 5ea:	32 d0       	rcall	.+100    	; 0x650 <__divsf3_pse+0x94>
 5ec:	91 50       	subi	r25, 0x01	; 1
 5ee:	50 40       	sbci	r21, 0x00	; 0
 5f0:	e6 95       	lsr	r30
 5f2:	00 1c       	adc	r0, r0
 5f4:	ca f7       	brpl	.-14     	; 0x5e8 <__divsf3_pse+0x2c>
 5f6:	2b d0       	rcall	.+86     	; 0x64e <__divsf3_pse+0x92>
 5f8:	fe 2f       	mov	r31, r30
 5fa:	29 d0       	rcall	.+82     	; 0x64e <__divsf3_pse+0x92>
 5fc:	66 0f       	add	r22, r22
 5fe:	77 1f       	adc	r23, r23
 600:	88 1f       	adc	r24, r24
 602:	bb 1f       	adc	r27, r27
 604:	26 17       	cp	r18, r22
 606:	37 07       	cpc	r19, r23
 608:	48 07       	cpc	r20, r24
 60a:	ab 07       	cpc	r26, r27
 60c:	b0 e8       	ldi	r27, 0x80	; 128
 60e:	09 f0       	breq	.+2      	; 0x612 <__divsf3_pse+0x56>
 610:	bb 0b       	sbc	r27, r27
 612:	80 2d       	mov	r24, r0
 614:	bf 01       	movw	r22, r30
 616:	ff 27       	eor	r31, r31
 618:	93 58       	subi	r25, 0x83	; 131
 61a:	5f 4f       	sbci	r21, 0xFF	; 255
 61c:	3a f0       	brmi	.+14     	; 0x62c <__divsf3_pse+0x70>
 61e:	9e 3f       	cpi	r25, 0xFE	; 254
 620:	51 05       	cpc	r21, r1
 622:	78 f0       	brcs	.+30     	; 0x642 <__divsf3_pse+0x86>
 624:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__fp_inf>
 628:	0c 94 b3 07 	jmp	0xf66	; 0xf66 <__fp_szero>
 62c:	5f 3f       	cpi	r21, 0xFF	; 255
 62e:	e4 f3       	brlt	.-8      	; 0x628 <__divsf3_pse+0x6c>
 630:	98 3e       	cpi	r25, 0xE8	; 232
 632:	d4 f3       	brlt	.-12     	; 0x628 <__divsf3_pse+0x6c>
 634:	86 95       	lsr	r24
 636:	77 95       	ror	r23
 638:	67 95       	ror	r22
 63a:	b7 95       	ror	r27
 63c:	f7 95       	ror	r31
 63e:	9f 5f       	subi	r25, 0xFF	; 255
 640:	c9 f7       	brne	.-14     	; 0x634 <__divsf3_pse+0x78>
 642:	88 0f       	add	r24, r24
 644:	91 1d       	adc	r25, r1
 646:	96 95       	lsr	r25
 648:	87 95       	ror	r24
 64a:	97 f9       	bld	r25, 7
 64c:	08 95       	ret
 64e:	e1 e0       	ldi	r30, 0x01	; 1
 650:	66 0f       	add	r22, r22
 652:	77 1f       	adc	r23, r23
 654:	88 1f       	adc	r24, r24
 656:	bb 1f       	adc	r27, r27
 658:	62 17       	cp	r22, r18
 65a:	73 07       	cpc	r23, r19
 65c:	84 07       	cpc	r24, r20
 65e:	ba 07       	cpc	r27, r26
 660:	20 f0       	brcs	.+8      	; 0x66a <__divsf3_pse+0xae>
 662:	62 1b       	sub	r22, r18
 664:	73 0b       	sbc	r23, r19
 666:	84 0b       	sbc	r24, r20
 668:	ba 0b       	sbc	r27, r26
 66a:	ee 1f       	adc	r30, r30
 66c:	88 f7       	brcc	.-30     	; 0x650 <__divsf3_pse+0x94>
 66e:	e0 95       	com	r30
 670:	08 95       	ret

Disassembly of section .text:

00000cc0 <__fixunssfsi>:
 cc0:	0e 94 dd 06 	call	0xdba	; 0xdba <__fp_splitA>
 cc4:	88 f0       	brcs	.+34     	; 0xce8 <__fixunssfsi+0x28>
 cc6:	9f 57       	subi	r25, 0x7F	; 127
 cc8:	98 f0       	brcs	.+38     	; 0xcf0 <__fixunssfsi+0x30>
 cca:	b9 2f       	mov	r27, r25
 ccc:	99 27       	eor	r25, r25
 cce:	b7 51       	subi	r27, 0x17	; 23
 cd0:	b0 f0       	brcs	.+44     	; 0xcfe <__fixunssfsi+0x3e>
 cd2:	e1 f0       	breq	.+56     	; 0xd0c <__fixunssfsi+0x4c>
 cd4:	66 0f       	add	r22, r22
 cd6:	77 1f       	adc	r23, r23
 cd8:	88 1f       	adc	r24, r24
 cda:	99 1f       	adc	r25, r25
 cdc:	1a f0       	brmi	.+6      	; 0xce4 <__fixunssfsi+0x24>
 cde:	ba 95       	dec	r27
 ce0:	c9 f7       	brne	.-14     	; 0xcd4 <__fixunssfsi+0x14>
 ce2:	14 c0       	rjmp	.+40     	; 0xd0c <__fixunssfsi+0x4c>
 ce4:	b1 30       	cpi	r27, 0x01	; 1
 ce6:	91 f0       	breq	.+36     	; 0xd0c <__fixunssfsi+0x4c>
 ce8:	0e 94 b2 07 	call	0xf64	; 0xf64 <__fp_zero>
 cec:	b1 e0       	ldi	r27, 0x01	; 1
 cee:	08 95       	ret
 cf0:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <__fp_zero>
 cf4:	67 2f       	mov	r22, r23
 cf6:	78 2f       	mov	r23, r24
 cf8:	88 27       	eor	r24, r24
 cfa:	b8 5f       	subi	r27, 0xF8	; 248
 cfc:	39 f0       	breq	.+14     	; 0xd0c <__fixunssfsi+0x4c>
 cfe:	b9 3f       	cpi	r27, 0xF9	; 249
 d00:	cc f3       	brlt	.-14     	; 0xcf4 <__fixunssfsi+0x34>
 d02:	86 95       	lsr	r24
 d04:	77 95       	ror	r23
 d06:	67 95       	ror	r22
 d08:	b3 95       	inc	r27
 d0a:	d9 f7       	brne	.-10     	; 0xd02 <__fixunssfsi+0x42>
 d0c:	3e f4       	brtc	.+14     	; 0xd1c <__fixunssfsi+0x5c>
 d0e:	90 95       	com	r25
 d10:	80 95       	com	r24
 d12:	70 95       	com	r23
 d14:	61 95       	neg	r22
 d16:	7f 4f       	sbci	r23, 0xFF	; 255
 d18:	8f 4f       	sbci	r24, 0xFF	; 255
 d1a:	9f 4f       	sbci	r25, 0xFF	; 255
 d1c:	08 95       	ret

Disassembly of section .text:

00000b0a <__floatunsisf>:
 b0a:	e8 94       	clt
 b0c:	09 c0       	rjmp	.+18     	; 0xb20 <__floatsisf+0x12>

00000b0e <__floatsisf>:
 b0e:	97 fb       	bst	r25, 7
 b10:	3e f4       	brtc	.+14     	; 0xb20 <__floatsisf+0x12>
 b12:	90 95       	com	r25
 b14:	80 95       	com	r24
 b16:	70 95       	com	r23
 b18:	61 95       	neg	r22
 b1a:	7f 4f       	sbci	r23, 0xFF	; 255
 b1c:	8f 4f       	sbci	r24, 0xFF	; 255
 b1e:	9f 4f       	sbci	r25, 0xFF	; 255
 b20:	99 23       	and	r25, r25
 b22:	a9 f0       	breq	.+42     	; 0xb4e <__floatsisf+0x40>
 b24:	f9 2f       	mov	r31, r25
 b26:	96 e9       	ldi	r25, 0x96	; 150
 b28:	bb 27       	eor	r27, r27
 b2a:	93 95       	inc	r25
 b2c:	f6 95       	lsr	r31
 b2e:	87 95       	ror	r24
 b30:	77 95       	ror	r23
 b32:	67 95       	ror	r22
 b34:	b7 95       	ror	r27
 b36:	f1 11       	cpse	r31, r1
 b38:	f8 cf       	rjmp	.-16     	; 0xb2a <__floatsisf+0x1c>
 b3a:	fa f4       	brpl	.+62     	; 0xb7a <__floatsisf+0x6c>
 b3c:	bb 0f       	add	r27, r27
 b3e:	11 f4       	brne	.+4      	; 0xb44 <__floatsisf+0x36>
 b40:	60 ff       	sbrs	r22, 0
 b42:	1b c0       	rjmp	.+54     	; 0xb7a <__floatsisf+0x6c>
 b44:	6f 5f       	subi	r22, 0xFF	; 255
 b46:	7f 4f       	sbci	r23, 0xFF	; 255
 b48:	8f 4f       	sbci	r24, 0xFF	; 255
 b4a:	9f 4f       	sbci	r25, 0xFF	; 255
 b4c:	16 c0       	rjmp	.+44     	; 0xb7a <__floatsisf+0x6c>
 b4e:	88 23       	and	r24, r24
 b50:	11 f0       	breq	.+4      	; 0xb56 <__floatsisf+0x48>
 b52:	96 e9       	ldi	r25, 0x96	; 150
 b54:	11 c0       	rjmp	.+34     	; 0xb78 <__floatsisf+0x6a>
 b56:	77 23       	and	r23, r23
 b58:	21 f0       	breq	.+8      	; 0xb62 <__floatsisf+0x54>
 b5a:	9e e8       	ldi	r25, 0x8E	; 142
 b5c:	87 2f       	mov	r24, r23
 b5e:	76 2f       	mov	r23, r22
 b60:	05 c0       	rjmp	.+10     	; 0xb6c <__floatsisf+0x5e>
 b62:	66 23       	and	r22, r22
 b64:	71 f0       	breq	.+28     	; 0xb82 <__floatsisf+0x74>
 b66:	96 e8       	ldi	r25, 0x86	; 134
 b68:	86 2f       	mov	r24, r22
 b6a:	70 e0       	ldi	r23, 0x00	; 0
 b6c:	60 e0       	ldi	r22, 0x00	; 0
 b6e:	2a f0       	brmi	.+10     	; 0xb7a <__floatsisf+0x6c>
 b70:	9a 95       	dec	r25
 b72:	66 0f       	add	r22, r22
 b74:	77 1f       	adc	r23, r23
 b76:	88 1f       	adc	r24, r24
 b78:	da f7       	brpl	.-10     	; 0xb70 <__floatsisf+0x62>
 b7a:	88 0f       	add	r24, r24
 b7c:	96 95       	lsr	r25
 b7e:	87 95       	ror	r24
 b80:	97 f9       	bld	r25, 7
 b82:	08 95       	ret

Disassembly of section .text:

00000d1e <__fp_cmp>:
 d1e:	99 0f       	add	r25, r25
 d20:	00 08       	sbc	r0, r0
 d22:	55 0f       	add	r21, r21
 d24:	aa 0b       	sbc	r26, r26
 d26:	e0 e8       	ldi	r30, 0x80	; 128
 d28:	fe ef       	ldi	r31, 0xFE	; 254
 d2a:	16 16       	cp	r1, r22
 d2c:	17 06       	cpc	r1, r23
 d2e:	e8 07       	cpc	r30, r24
 d30:	f9 07       	cpc	r31, r25
 d32:	c0 f0       	brcs	.+48     	; 0xd64 <__fp_cmp+0x46>
 d34:	12 16       	cp	r1, r18
 d36:	13 06       	cpc	r1, r19
 d38:	e4 07       	cpc	r30, r20
 d3a:	f5 07       	cpc	r31, r21
 d3c:	98 f0       	brcs	.+38     	; 0xd64 <__fp_cmp+0x46>
 d3e:	62 1b       	sub	r22, r18
 d40:	73 0b       	sbc	r23, r19
 d42:	84 0b       	sbc	r24, r20
 d44:	95 0b       	sbc	r25, r21
 d46:	39 f4       	brne	.+14     	; 0xd56 <__fp_cmp+0x38>
 d48:	0a 26       	eor	r0, r26
 d4a:	61 f0       	breq	.+24     	; 0xd64 <__fp_cmp+0x46>
 d4c:	23 2b       	or	r18, r19
 d4e:	24 2b       	or	r18, r20
 d50:	25 2b       	or	r18, r21
 d52:	21 f4       	brne	.+8      	; 0xd5c <__fp_cmp+0x3e>
 d54:	08 95       	ret
 d56:	0a 26       	eor	r0, r26
 d58:	09 f4       	brne	.+2      	; 0xd5c <__fp_cmp+0x3e>
 d5a:	a1 40       	sbci	r26, 0x01	; 1
 d5c:	a6 95       	lsr	r26
 d5e:	8f ef       	ldi	r24, 0xFF	; 255
 d60:	81 1d       	adc	r24, r1
 d62:	81 1d       	adc	r24, r1
 d64:	08 95       	ret

Disassembly of section .text:

00000fba <__fp_inf>:
 fba:	97 f9       	bld	r25, 7
 fbc:	9f 67       	ori	r25, 0x7F	; 127
 fbe:	80 e8       	ldi	r24, 0x80	; 128
 fc0:	70 e0       	ldi	r23, 0x00	; 0
 fc2:	60 e0       	ldi	r22, 0x00	; 0
 fc4:	08 95       	ret

Disassembly of section .text:

00000fe6 <__fp_nan>:
 fe6:	9f ef       	ldi	r25, 0xFF	; 255
 fe8:	80 ec       	ldi	r24, 0xC0	; 192
 fea:	08 95       	ret

Disassembly of section .text:

00000f48 <__fp_pscA>:
 f48:	00 24       	eor	r0, r0
 f4a:	0a 94       	dec	r0
 f4c:	16 16       	cp	r1, r22
 f4e:	17 06       	cpc	r1, r23
 f50:	18 06       	cpc	r1, r24
 f52:	09 06       	cpc	r0, r25
 f54:	08 95       	ret

Disassembly of section .text:

00000f56 <__fp_pscB>:
 f56:	00 24       	eor	r0, r0
 f58:	0a 94       	dec	r0
 f5a:	12 16       	cp	r1, r18
 f5c:	13 06       	cpc	r1, r19
 f5e:	14 06       	cpc	r1, r20
 f60:	05 06       	cpc	r0, r21
 f62:	08 95       	ret

Disassembly of section .text:

00000e96 <__fp_round>:
 e96:	09 2e       	mov	r0, r25
 e98:	03 94       	inc	r0
 e9a:	00 0c       	add	r0, r0
 e9c:	11 f4       	brne	.+4      	; 0xea2 <__fp_round+0xc>
 e9e:	88 23       	and	r24, r24
 ea0:	52 f0       	brmi	.+20     	; 0xeb6 <__fp_round+0x20>
 ea2:	bb 0f       	add	r27, r27
 ea4:	40 f4       	brcc	.+16     	; 0xeb6 <__fp_round+0x20>
 ea6:	bf 2b       	or	r27, r31
 ea8:	11 f4       	brne	.+4      	; 0xeae <__fp_round+0x18>
 eaa:	60 ff       	sbrs	r22, 0
 eac:	04 c0       	rjmp	.+8      	; 0xeb6 <__fp_round+0x20>
 eae:	6f 5f       	subi	r22, 0xFF	; 255
 eb0:	7f 4f       	sbci	r23, 0xFF	; 255
 eb2:	8f 4f       	sbci	r24, 0xFF	; 255
 eb4:	9f 4f       	sbci	r25, 0xFF	; 255
 eb6:	08 95       	ret

Disassembly of section .text:

00000daa <__fp_split3>:
 daa:	57 fd       	sbrc	r21, 7
 dac:	90 58       	subi	r25, 0x80	; 128
 dae:	44 0f       	add	r20, r20
 db0:	55 1f       	adc	r21, r21
 db2:	59 f0       	breq	.+22     	; 0xdca <__fp_splitA+0x10>
 db4:	5f 3f       	cpi	r21, 0xFF	; 255
 db6:	71 f0       	breq	.+28     	; 0xdd4 <__fp_splitA+0x1a>
 db8:	47 95       	ror	r20

00000dba <__fp_splitA>:
 dba:	88 0f       	add	r24, r24
 dbc:	97 fb       	bst	r25, 7
 dbe:	99 1f       	adc	r25, r25
 dc0:	61 f0       	breq	.+24     	; 0xdda <__fp_splitA+0x20>
 dc2:	9f 3f       	cpi	r25, 0xFF	; 255
 dc4:	79 f0       	breq	.+30     	; 0xde4 <__fp_splitA+0x2a>
 dc6:	87 95       	ror	r24
 dc8:	08 95       	ret
 dca:	12 16       	cp	r1, r18
 dcc:	13 06       	cpc	r1, r19
 dce:	14 06       	cpc	r1, r20
 dd0:	55 1f       	adc	r21, r21
 dd2:	f2 cf       	rjmp	.-28     	; 0xdb8 <__fp_split3+0xe>
 dd4:	46 95       	lsr	r20
 dd6:	f1 df       	rcall	.-30     	; 0xdba <__fp_splitA>
 dd8:	08 c0       	rjmp	.+16     	; 0xdea <__fp_splitA+0x30>
 dda:	16 16       	cp	r1, r22
 ddc:	17 06       	cpc	r1, r23
 dde:	18 06       	cpc	r1, r24
 de0:	99 1f       	adc	r25, r25
 de2:	f1 cf       	rjmp	.-30     	; 0xdc6 <__fp_splitA+0xc>
 de4:	86 95       	lsr	r24
 de6:	71 05       	cpc	r23, r1
 de8:	61 05       	cpc	r22, r1
 dea:	08 94       	sec
 dec:	08 95       	ret

Disassembly of section .text:

00000f64 <__fp_zero>:
 f64:	e8 94       	clt

00000f66 <__fp_szero>:
 f66:	bb 27       	eor	r27, r27
 f68:	66 27       	eor	r22, r22
 f6a:	77 27       	eor	r23, r23
 f6c:	cb 01       	movw	r24, r22
 f6e:	97 f9       	bld	r25, 7
 f70:	08 95       	ret

Disassembly of section .text:

00000fd8 <__mulsf3>:
 fd8:	0e 94 13 04 	call	0x826	; 0x826 <__mulsf3x>
 fdc:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <__fp_round>

Disassembly of section .text:

00000826 <__mulsf3x>:
 826:	0f c0       	rjmp	.+30     	; 0x846 <__mulsf3x+0x20>
 828:	0e 94 a4 07 	call	0xf48	; 0xf48 <__fp_pscA>
 82c:	38 f0       	brcs	.+14     	; 0x83c <__mulsf3x+0x16>
 82e:	0e 94 ab 07 	call	0xf56	; 0xf56 <__fp_pscB>
 832:	20 f0       	brcs	.+8      	; 0x83c <__mulsf3x+0x16>
 834:	95 23       	and	r25, r21
 836:	11 f0       	breq	.+4      	; 0x83c <__mulsf3x+0x16>
 838:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__fp_inf>
 83c:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <__fp_nan>
 840:	11 24       	eor	r1, r1
 842:	0c 94 b3 07 	jmp	0xf66	; 0xf66 <__fp_szero>
 846:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__fp_split3>
 84a:	70 f3       	brcs	.-36     	; 0x828 <__mulsf3x+0x2>

0000084c <__mulsf3_pse>:
 84c:	95 9f       	mul	r25, r21
 84e:	c1 f3       	breq	.-16     	; 0x840 <__mulsf3x+0x1a>
 850:	95 0f       	add	r25, r21
 852:	50 e0       	ldi	r21, 0x00	; 0
 854:	55 1f       	adc	r21, r21
 856:	62 9f       	mul	r22, r18
 858:	f0 01       	movw	r30, r0
 85a:	72 9f       	mul	r23, r18
 85c:	bb 27       	eor	r27, r27
 85e:	f0 0d       	add	r31, r0
 860:	b1 1d       	adc	r27, r1
 862:	63 9f       	mul	r22, r19
 864:	aa 27       	eor	r26, r26
 866:	f0 0d       	add	r31, r0
 868:	b1 1d       	adc	r27, r1
 86a:	aa 1f       	adc	r26, r26
 86c:	64 9f       	mul	r22, r20
 86e:	66 27       	eor	r22, r22
 870:	b0 0d       	add	r27, r0
 872:	a1 1d       	adc	r26, r1
 874:	66 1f       	adc	r22, r22
 876:	82 9f       	mul	r24, r18
 878:	22 27       	eor	r18, r18
 87a:	b0 0d       	add	r27, r0
 87c:	a1 1d       	adc	r26, r1
 87e:	62 1f       	adc	r22, r18
 880:	73 9f       	mul	r23, r19
 882:	b0 0d       	add	r27, r0
 884:	a1 1d       	adc	r26, r1
 886:	62 1f       	adc	r22, r18
 888:	83 9f       	mul	r24, r19
 88a:	a0 0d       	add	r26, r0
 88c:	61 1d       	adc	r22, r1
 88e:	22 1f       	adc	r18, r18
 890:	74 9f       	mul	r23, r20
 892:	33 27       	eor	r19, r19
 894:	a0 0d       	add	r26, r0
 896:	61 1d       	adc	r22, r1
 898:	23 1f       	adc	r18, r19
 89a:	84 9f       	mul	r24, r20
 89c:	60 0d       	add	r22, r0
 89e:	21 1d       	adc	r18, r1
 8a0:	82 2f       	mov	r24, r18
 8a2:	76 2f       	mov	r23, r22
 8a4:	6a 2f       	mov	r22, r26
 8a6:	11 24       	eor	r1, r1
 8a8:	9f 57       	subi	r25, 0x7F	; 127
 8aa:	50 40       	sbci	r21, 0x00	; 0
 8ac:	9a f0       	brmi	.+38     	; 0x8d4 <__stack+0x75>
 8ae:	f1 f0       	breq	.+60     	; 0x8ec <__stack+0x8d>
 8b0:	88 23       	and	r24, r24
 8b2:	4a f0       	brmi	.+18     	; 0x8c6 <__stack+0x67>
 8b4:	ee 0f       	add	r30, r30
 8b6:	ff 1f       	adc	r31, r31
 8b8:	bb 1f       	adc	r27, r27
 8ba:	66 1f       	adc	r22, r22
 8bc:	77 1f       	adc	r23, r23
 8be:	88 1f       	adc	r24, r24
 8c0:	91 50       	subi	r25, 0x01	; 1
 8c2:	50 40       	sbci	r21, 0x00	; 0
 8c4:	a9 f7       	brne	.-22     	; 0x8b0 <__stack+0x51>
 8c6:	9e 3f       	cpi	r25, 0xFE	; 254
 8c8:	51 05       	cpc	r21, r1
 8ca:	80 f0       	brcs	.+32     	; 0x8ec <__stack+0x8d>
 8cc:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__fp_inf>
 8d0:	0c 94 b3 07 	jmp	0xf66	; 0xf66 <__fp_szero>
 8d4:	5f 3f       	cpi	r21, 0xFF	; 255
 8d6:	e4 f3       	brlt	.-8      	; 0x8d0 <__stack+0x71>
 8d8:	98 3e       	cpi	r25, 0xE8	; 232
 8da:	d4 f3       	brlt	.-12     	; 0x8d0 <__stack+0x71>
 8dc:	86 95       	lsr	r24
 8de:	77 95       	ror	r23
 8e0:	67 95       	ror	r22
 8e2:	b7 95       	ror	r27
 8e4:	f7 95       	ror	r31
 8e6:	e7 95       	ror	r30
 8e8:	9f 5f       	subi	r25, 0xFF	; 255
 8ea:	c1 f7       	brne	.-16     	; 0x8dc <__stack+0x7d>
 8ec:	fe 2b       	or	r31, r30
 8ee:	88 0f       	add	r24, r24
 8f0:	91 1d       	adc	r25, r1
 8f2:	96 95       	lsr	r25
 8f4:	87 95       	ror	r24
 8f6:	97 f9       	bld	r25, 7
 8f8:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000dee <__udivmodsi4>:
 dee:	a1 e2       	ldi	r26, 0x21	; 33
 df0:	1a 2e       	mov	r1, r26
 df2:	aa 1b       	sub	r26, r26
 df4:	bb 1b       	sub	r27, r27
 df6:	fd 01       	movw	r30, r26
 df8:	0d c0       	rjmp	.+26     	; 0xe14 <__udivmodsi4_ep>

00000dfa <__udivmodsi4_loop>:
 dfa:	aa 1f       	adc	r26, r26
 dfc:	bb 1f       	adc	r27, r27
 dfe:	ee 1f       	adc	r30, r30
 e00:	ff 1f       	adc	r31, r31
 e02:	a2 17       	cp	r26, r18
 e04:	b3 07       	cpc	r27, r19
 e06:	e4 07       	cpc	r30, r20
 e08:	f5 07       	cpc	r31, r21
 e0a:	20 f0       	brcs	.+8      	; 0xe14 <__udivmodsi4_ep>
 e0c:	a2 1b       	sub	r26, r18
 e0e:	b3 0b       	sbc	r27, r19
 e10:	e4 0b       	sbc	r30, r20
 e12:	f5 0b       	sbc	r31, r21

00000e14 <__udivmodsi4_ep>:
 e14:	66 1f       	adc	r22, r22
 e16:	77 1f       	adc	r23, r23
 e18:	88 1f       	adc	r24, r24
 e1a:	99 1f       	adc	r25, r25
 e1c:	1a 94       	dec	r1
 e1e:	69 f7       	brne	.-38     	; 0xdfa <__udivmodsi4_loop>
 e20:	60 95       	com	r22
 e22:	70 95       	com	r23
 e24:	80 95       	com	r24
 e26:	90 95       	com	r25
 e28:	9b 01       	movw	r18, r22
 e2a:	ac 01       	movw	r20, r24
 e2c:	bd 01       	movw	r22, r26
 e2e:	cf 01       	movw	r24, r30
 e30:	08 95       	ret

Disassembly of section .text.libgcc:

00000ed2 <__movmemx_qi>:
 ed2:	99 27       	eor	r25, r25

00000ed4 <__movmemx_hi>:
 ed4:	77 fd       	sbrc	r23, 7
 ed6:	05 c0       	rjmp	.+10     	; 0xee2 <__movmemx_hi+0xe>
 ed8:	05 90       	lpm	r0, Z+
 eda:	0d 92       	st	X+, r0
 edc:	01 97       	sbiw	r24, 0x01	; 1
 ede:	e1 f7       	brne	.-8      	; 0xed8 <__movmemx_hi+0x4>
 ee0:	08 95       	ret
 ee2:	01 90       	ld	r0, Z+
 ee4:	0d 92       	st	X+, r0
 ee6:	01 97       	sbiw	r24, 0x01	; 1
 ee8:	e1 f7       	brne	.-8      	; 0xee2 <__movmemx_hi+0xe>
 eea:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000ff4 <_fini>:
 ff4:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000ff6 <__funcs_on_exit>:
 ff6:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000ff8 <__simulator_exit>:
 ff8:	08 95       	ret

Disassembly of section .text.exit:

00000eec <exit>:
 eec:	ec 01       	movw	r28, r24
 eee:	0e 94 fb 07 	call	0xff6	; 0xff6 <__funcs_on_exit>
 ef2:	0e 94 fa 07 	call	0xff4	; 0xff4 <_fini>
 ef6:	ce 01       	movw	r24, r28
 ef8:	0e 94 fc 07 	call	0xff8	; 0xff8 <__simulator_exit>
 efc:	ce 01       	movw	r24, r28
 efe:	0e 94 f8 07 	call	0xff0	; 0xff0 <_Exit>

Disassembly of section .text._Exit:

00000ff0 <_Exit>:
 ff0:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
